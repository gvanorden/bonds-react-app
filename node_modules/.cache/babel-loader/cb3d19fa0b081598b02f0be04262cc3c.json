{"ast":null,"code":"var _jsxFileName = \"/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_spreadsheet.jsx\";\nimport React, { Component } from \"react\";\nimport { Form, Table, Card, Row, Col, InputGroup, Button, OverlayTrigger, Tooltip, Pagination } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport '../index.css';\n\nclass BondPricingTwo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bonds: [],\n      label: 'Attach .csv',\n      totalPrice: 0,\n      totalInterest: 0,\n      totalValue: 0,\n      totalDenomination: 0,\n      totalDate: null,\n      month: this.getCurrentMonth(),\n      year: this.getCurrentYear(),\n      hideTable: true,\n      showCards: {\n        visibility: 'hidden'\n      },\n      export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n      exportResults: [],\n      bondCount: [0, 1],\n      currentPage: 0\n    };\n    this.setFilename = this.setFilename.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.onUpdateEnter = this.onUpdateEnter.bind(this);\n    this.onUpdateClick = this.onUpdateClick.bind(this);\n    this.appendToTable = this.appendToTable.bind(this);\n    this.exportData = this.exportData.bind(this);\n    this.setCurrentPage = this.setCurrentPage.bind(this);\n    this.setNextPage = this.setNextPage.bind(this);\n    this.exportOnClick = this.exportOnClick.bind(this);\n  }\n\n  exportOnClick() {\n    let bondExports = [];\n    let bondRows = document.getElementById('bond-table').getElementsByTagName('tr');\n\n    for (let r = 0; r < bondRows.length; r++) {\n      let bondExport = [];\n      let bondCells = bondRows[r].cells;\n\n      for (let c = 0; c < bondCells.length; c++) {\n        bondExport.push(bondCells[c].innerHTML);\n      }\n\n      bondExports.push(bondExport);\n    }\n\n    console.log(bondExports);\n    this.setState({\n      exportResults: bondExports\n    });\n  }\n\n  setCurrentPage(i) {\n    this.setState({\n      currentPage: i\n    });\n  }\n\n  setNextPage(i) {\n    this.setState({\n      currentPage: i + 1\n    });\n  }\n\n  formatDate(value_date) {\n    const months = {\n      \"01\": \"Jan.\",\n      \"02\": \"Feb.\",\n      \"03\": \"March\",\n      \"04\": \"April\",\n      \"05\": \"May\",\n      \"06\": \"June\",\n      \"07\": \"July\",\n      \"08\": \"Aug.\",\n      \"09\": \"Sept\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    let month = value_date.split('/')[0];\n\n    if (month.length === 1) {\n      month = '0' + month;\n    }\n\n    let year = value_date.split('/')[1];\n    let month_string = months[month] + ' 1, ' + year;\n    return month_string;\n  }\n\n  getCurrentMonth() {\n    let d = new Date();\n    return d.getMonth() + 1;\n  }\n\n  getCurrentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  exportData() {\n    let exports = this.state.export.split(',');\n    let export_data = [];\n    let i = 0;\n\n    while (i + 10 <= exports.length) {\n      export_data.push(exports.slice(i, i + 10));\n      i += 10;\n    }\n\n    export_data.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)]);\n    this.setState({\n      exportResults: export_data\n    });\n  }\n\n  handleClickX(element) {\n    element.parentNode.parentNode.remove();\n\n    if (document.getElementById('bond-table').getElementsByClassName('bond-row').length > 0) {\n      this.onUpdateClick();\n    } else {\n      this.setState({\n        totalPrice: 0,\n        totalInterest: 0,\n        totalValue: 0,\n        totalDenomination: 0\n      });\n    }\n  }\n\n  onUpdateEnter(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      this.setState({\n        showTooltip: {\n          visibility: 'hidden'\n        }\n      });\n    }, 3500);\n  }\n\n  onUpdateClick() {\n    let rows = document.getElementById('bond-table').getElementsByTagName('tr');\n    let bonds = [];\n    let vMonth = document.getElementsByName('aMonth')[0].value;\n    let vYear = document.getElementsByName('aYear')[0].value;\n\n    for (let i = 1; i < rows.length; i++) {\n      let series = rows[i].getElementsByTagName('td')[1].innerHTML;\n      let denomination = rows[i].getElementsByTagName('td')[2].innerHTML.substring(1);\n      let serialNumber = rows[i].getElementsByTagName('td')[0].innerHTML;\n      let iMonth = rows[i].getElementsByTagName('td')[3].innerHTML.split('/')[0];\n      let iYear = rows[i].getElementsByTagName('td')[3].innerHTML.split('/')[1];\n      let bond = {\n        'vMonth': vMonth,\n        'vYear': vYear,\n        'series': series,\n        'denomination': denomination,\n        'serialNumber': serialNumber,\n        'iMonth': iMonth,\n        'iYear': iYear\n      };\n      bonds.push(bond);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      let bondRows = document.getElementById('bond-table').getElementsByTagName('tbody')[0];\n      bondRows.remove();\n      let exports = [[\"Value as of\", \"Serial #\", \"Series\", \"Denomination\", \"Issue Date\", \"Next Accrual\", \"Final Maturity\", \"Issue Price\", \"Interest\", \"Value\"]];\n\n      for (let i = 0; i < response[0].length; i++) {\n        this.appendToTable(response[0][i]);\n        exports.push([response[0][i]['vDate'], response[0][i]['serialNumber'], response[0][i]['series'], '$' + response[0][i]['denomination'], response[0][i]['iDate'], '$' + parseFloat(response[0][i]['iPrice']).toFixed(2), response[0][i]['aDate'], response[0][i]['mDate'], '$' + parseFloat(response[0][i]['value']).toFixed(2), '$' + parseFloat(response[0][i]['interest']).toFixed(2)]);\n      }\n\n      exports.push([\"\", \"\", \"\", '$' + response[1]['totalDenominations'], \"\", \"\", \"\", '$' + parseFloat(response[1]['totalPrices']).toFixed(2), '$' + parseFloat(response[1]['totalInterests']).toFixed(2), '$' + parseFloat(response[1]['totalValues']).toFixed(2)]);\n      this.setState({\n        totalDate: this.formatDate(response[1]['totalDate']),\n        totalDenomination: response[1]['totalDenominations'],\n        totalPrice: response[1]['totalPrices'],\n        totalInterest: response[1]['totalInterests'],\n        totalValue: response[1]['totalValues']\n      });\n      this.setState({\n        exportResults: exports\n      });\n    });\n  }\n\n  appendToTable(currentBond) {\n    const bondTable = document.getElementById('bond-table');\n    let bondBody = null;\n\n    if (bondTable.getElementsByTagName('tbody').length === 0) {\n      bondBody = document.createElement('tbody');\n      bondTable.append(bondBody);\n    } else {\n      bondBody = bondTable.getElementsByTagName('tbody')[0];\n    }\n\n    if (currentBond['interest'] < 0) {\n      currentBond['interest'] = 0;\n    }\n\n    bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible';\n    let bondRow = bondBody.insertRow();\n    bondRow.className = \"bond-row\";\n    bondRow.style.textAlign = 'center';\n    bondRow.insertCell(0).innerHTML = currentBond['serialNumber'];\n    bondRow.insertCell(1).innerHTML = currentBond['series'];\n    let cell2 = bondRow.insertCell(2);\n    cell2.className = 'bond-denomination';\n    cell2.innerHTML = '$' + this.convertValues(currentBond['denomination']);\n    bondRow.insertCell(3).innerHTML = currentBond['iDate'];\n    bondRow.insertCell(4).innerHTML = currentBond['aDate'];\n    bondRow.insertCell(5).innerHTML = currentBond['mDate'];\n    let cell6 = bondRow.insertCell(6);\n    cell6.className = 'bond-price';\n    cell6.innerHTML = '$' + this.convertValues(parseFloat(currentBond['iPrice']).toFixed(2));\n    let cell7 = bondRow.insertCell(7);\n    cell7.className = 'bond-interest';\n    cell7.innerHTML = '$' + this.convertValues(parseFloat(currentBond['interest']).toFixed(2));\n    let cell8 = bondRow.insertCell(8);\n    cell8.className = 'bond-value';\n    cell8.innerHTML = '$' + this.convertValues(parseFloat(currentBond['value']).toFixed(2));\n    cell8.style.position = 'relative';\n    let span = document.createElement('span');\n    span.innerHTML = '&times;';\n    span.setAttribute('aria-hidden', 'true');\n    span.style.border = 'none';\n    let button = document.createElement('button');\n\n    button.onclick = () => {\n      this.handleClickX(button);\n    };\n\n    button.className = 'close';\n    button.style.position = 'absolute';\n    button.style.right = '-1em';\n    button.append(span);\n    cell8.append(button);\n    this.exportData();\n  }\n\n  setFilename(e) {\n    if (e.target.files.length > 0) {\n      this.setState({\n        label: e.target.files[0].name\n      });\n    }\n\n    if (this.state.hideTable) {\n      this.setState({\n        hideTable: false,\n        showCards: {\n          visibility: 'visible'\n        }\n      });\n    }\n\n    let vMonth = document.getElementsByName('aMonth')[0].value;\n    let vYear = document.getElementsByName('aYear')[0].value;\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      const bonds = reader.result;\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n          bonds,\n          vMonth,\n          vYear\n        })\n      };\n      fetch('http://localhost:5000/upload', requestOptions).then(response => response.json()).then(response => {\n        let exports = [];\n        exports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value']);\n\n        for (let i = 0; i < response[0].length; i++) {\n          let values = [response[0][i]['vDate'], response[0][i]['serialNumber'], response[0][i]['series'], '$' + response[0][i]['denomination'], response[0][i]['iDate'], '$' + parseFloat(response[0][i]['iPrice']).toFixed(2), response[0][i]['aDate'], response[0][i]['mDate'], '$' + parseFloat(response[0][i]['value']).toFixed(2), '$' + parseFloat(response[0][i]['interest']).toFixed(2)];\n          exports.push(values);\n        }\n\n        this.setState({\n          totalDate: this.formatDate(response[1]['totalDate']),\n          totalDenomination: response[1]['totalDenominations'],\n          totalPrice: response[1]['totalPrices'],\n          totalInterest: response[1]['totalInterests'],\n          totalValue: response[1]['totalValues']\n        });\n        exports.push([\"\", \"\", \"\", '$' + response[1]['totalDenominations'], \"\", \"\", \"\", '$' + parseFloat(response[1]['totalPrices']).toFixed(2), '$' + parseFloat(response[1]['totalInterests']).toFixed(2), '$' + parseFloat(response[1]['totalValues']).toFixed(2)]);\n        this.setState({\n          bonds: response[0],\n          exportResults: exports\n        });\n      });\n    };\n\n    reader.readAsText(e.target.files[0]);\n  }\n\n  convertValues(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      className: \"form-csv\",\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      style: {\n        float: 'left',\n        width: '30%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 29\n      }\n    }, \"VALUE AS OF\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: this.state.month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 37\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1992\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: this.state.year,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(OverlayTrigger, {\n      placement: \"right\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        style: this.state.showTooltip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 33\n        }\n      }, \"Revalue all bonds by this date.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      size: \"sm\",\n      variant: \"success\",\n      onMouseEnter: this.onUpdateEnter,\n      onClick: this.onUpdateClick,\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '.5em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 33\n      }\n    }, \"UPDATE\")))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        marginLeft: '2em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 29\n      }\n    }, \"ATTACHMENT\"), /*#__PURE__*/React.createElement(Form.File, {\n      id: \"custom-file\",\n      label: this.state.label,\n      onChange: this.setFilename,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '70%',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"card-container\",\n      style: {\n        width: '100%',\n        float: 'left',\n        paddingTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 21\n      }\n    }, this.state.exportResults.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.exportOnClick,\n      style: {\n        width: '100%',\n        textAlign: 'right',\n        marginBottom: '.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 64\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: 'bonds_valued_from_' + this.state.month + '_' + this.state.year,\n      data: this.state.exportResults.length > 0 ? this.state.exportResults : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 29\n      }\n    }, \"+ [Export]\")) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 37\n      }\n    }, \"VALUED AS OF\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 41\n      }\n    }, this.state.totalDate)))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 37\n      }\n    }, \"TOTAL FACE VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(this.state.totalDenomination))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 37\n      }\n    }, \"TOTAL COST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-price\",\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalPrice).toFixed(2)))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 37\n      }\n    }, \"TOTAL INTEREST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-interest\",\n      style: {\n        color: '#ff8c00'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalInterest).toFixed(2)))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 37\n      }\n    }, \"TOTAL VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-value\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalValue).toFixed(2)))))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        float: 'left',\n        margin: '1em 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 21\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      id: \"bond-table\",\n      hidden: this.state.hideTable,\n      onChange: this.state.changeTable,\n      style: {\n        width: '100%',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \".75em\",\n        textTransform: \"uppercase\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 49\n      }\n    }, \"Serial Number\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 49\n      }\n    }, \"Bond Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 49\n      }\n    }, \"Bond Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 49\n      }\n    }, \"Issue Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 49\n      }\n    }, \"Next Accrual\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 49\n      }\n    }, \"Final Maturity\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 49\n      }\n    }, \"Issue Price\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 49\n      }\n    }, \"Interest\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 49\n      }\n    }, \"Value\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 41\n      }\n    }, this.state.bonds //.slice(this.state.currentPage * 5, (this.state.currentPage + 1) * 5)\n    .map((bond, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 57\n      }\n    }, bond['serialNumber']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 57\n      }\n    }, bond['series']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(bond['denomination'])), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 57\n      }\n    }, bond['iDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 57\n      }\n    }, bond['aDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 57\n      }\n    }, bond['mDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['iPrice']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['interest']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['value']).toFixed(2)))))))) : null)));\n  }\n\n}\n\nexport default BondPricingTwo;","map":{"version":3,"sources":["/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_spreadsheet.jsx"],"names":["React","Component","Form","Table","Card","Row","Col","InputGroup","Button","OverlayTrigger","Tooltip","Pagination","CSVLink","BondPricingTwo","constructor","props","state","bonds","label","totalPrice","totalInterest","totalValue","totalDenomination","totalDate","month","getCurrentMonth","year","getCurrentYear","hideTable","showCards","visibility","export","exportResults","bondCount","currentPage","setFilename","bind","formatDate","onUpdateEnter","onUpdateClick","appendToTable","exportData","setCurrentPage","setNextPage","exportOnClick","bondExports","bondRows","document","getElementById","getElementsByTagName","r","length","bondExport","bondCells","cells","c","push","innerHTML","console","log","setState","i","value_date","months","split","month_string","d","Date","getMonth","getFullYear","exports","export_data","slice","parseFloat","toFixed","handleClickX","element","parentNode","remove","getElementsByClassName","e","preventDefault","setTimeout","showTooltip","rows","vMonth","getElementsByName","value","vYear","series","denomination","substring","serialNumber","iMonth","iYear","bond","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","currentBond","bondTable","bondBody","createElement","append","style","bondRow","insertRow","className","textAlign","insertCell","cell2","convertValues","cell6","cell7","cell8","position","span","setAttribute","border","button","onclick","right","target","files","name","reader","FileReader","onload","result","values","readAsText","toString","replace","render","float","width","marginLeft","top","fontSize","fontWeight","margin","paddingTop","marginBottom","color","changeTable","textTransform","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Table, Card, Row, Col, InputGroup, Button, OverlayTrigger, Tooltip, Pagination } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport '../index.css'\n\n\nclass BondPricingTwo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bonds: [],\n            label: 'Attach .csv',\n            totalPrice: 0,\n            totalInterest: 0,\n            totalValue: 0,\n            totalDenomination: 0,\n            totalDate: null,\n            month: this.getCurrentMonth(),\n            year: this.getCurrentYear(),\n            hideTable: true,\n            showCards: { visibility: 'hidden' },\n            export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n            exportResults: [],\n            bondCount: [0, 1],\n            currentPage: 0\n        };\n\n        this.setFilename = this.setFilename.bind(this)\n        this.formatDate = this.formatDate.bind(this)\n        this.onUpdateEnter = this.onUpdateEnter.bind(this)\n        this.onUpdateClick = this.onUpdateClick.bind(this)\n        this.appendToTable = this.appendToTable.bind(this)\n        this.exportData = this.exportData.bind(this)\n        this.setCurrentPage = this.setCurrentPage.bind(this)\n        this.setNextPage = this.setNextPage.bind(this)\n        this.exportOnClick = this.exportOnClick.bind(this)\n    }\n\n    exportOnClick() {\n        let bondExports = []\n        let bondRows = document.getElementById('bond-table').getElementsByTagName('tr')\n        for (let r = 0; r < bondRows.length; r++) {\n            let bondExport = []\n            let bondCells = bondRows[r].cells\n\n            for (let c = 0; c < bondCells.length; c++) {\n                bondExport.push(bondCells[c].innerHTML)\n            }\n\n            bondExports.push(bondExport)\n        }\n        console.log(bondExports)\n\n        this.setState({ exportResults: bondExports })\n    }\n\n    setCurrentPage(i) {\n        this.setState({ currentPage: i })\n    }\n\n    setNextPage(i) {\n        this.setState({ currentPage: i + 1 })\n    }\n\n    formatDate(value_date) {\n        const months = { \"01\": \"Jan.\", \"02\": \"Feb.\", \"03\": \"March\", \"04\": \"April\", \"05\": \"May\", \"06\": \"June\", \"07\": \"July\", \"08\": \"Aug.\", \"09\": \"Sept\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\" }\n\n        let month = value_date.split('/')[0]\n\n        if (month.length === 1) {\n            month = '0' + month\n        }\n\n        let year = value_date.split('/')[1]\n\n        let month_string = months[month] + ' 1, ' + year\n\n        return month_string\n    }\n\n    getCurrentMonth() {\n        let d = new Date();\n        return d.getMonth() + 1\n    }\n\n    getCurrentYear() {\n        let d = new Date();\n\n        return d.getFullYear()\n    }\n\n    exportData() {\n        let exports = (this.state.export).split(',')\n\n        let export_data = []\n\n        let i = 0\n        while ((i + 10) <= exports.length) {\n            export_data.push(exports.slice(i, i + 10))\n            i += 10\n        }\n\n        export_data.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)])\n\n        this.setState({ exportResults: export_data })\n    }\n\n    handleClickX(element) {\n        element.parentNode.parentNode.remove()\n\n        if ((document.getElementById('bond-table').getElementsByClassName('bond-row')).length > 0) {\n            this.onUpdateClick();\n        }\n        else {\n            this.setState({ totalPrice: 0, totalInterest: 0, totalValue: 0, totalDenomination: 0 })\n        }\n    }\n\n    onUpdateEnter(e) {\n        e.preventDefault();\n\n        setTimeout(() => {\n            this.setState({ showTooltip: { visibility: 'hidden' } })\n        }, 3500)\n    }\n\n    onUpdateClick() {\n        let rows = document.getElementById('bond-table').getElementsByTagName('tr')\n\n        let bonds = []\n\n        let vMonth = document.getElementsByName('aMonth')[0].value\n        let vYear = document.getElementsByName('aYear')[0].value\n\n        for (let i = 1; i < rows.length; i++) {\n            let series = rows[i].getElementsByTagName('td')[1].innerHTML\n            let denomination = (rows[i].getElementsByTagName('td')[2].innerHTML).substring(1)\n            let serialNumber = rows[i].getElementsByTagName('td')[0].innerHTML\n            let iMonth = (rows[i].getElementsByTagName('td')[3].innerHTML).split('/')[0]\n            let iYear = (rows[i].getElementsByTagName('td')[3].innerHTML).split('/')[1]\n\n            let bond = {\n                'vMonth': vMonth,\n                'vYear': vYear,\n                'series': series,\n                'denomination': denomination,\n                'serialNumber': serialNumber,\n                'iMonth': iMonth,\n                'iYear': iYear,\n            }\n\n            bonds.push(bond)\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                let bondRows = document.getElementById('bond-table').getElementsByTagName('tbody')[0]\n                bondRows.remove()\n\n                let exports = [[\"Value as of\", \"Serial #\", \"Series\", \"Denomination\", \"Issue Date\", \"Next Accrual\", \"Final Maturity\", \"Issue Price\", \"Interest\", \"Value\"]]\n\n                for (let i = 0; i < response[0].length; i++) {\n                    this.appendToTable(response[0][i])\n\n                    exports.push([\n                        response[0][i]['vDate'],\n                        response[0][i]['serialNumber'],\n                        response[0][i]['series'],\n                        '$' + response[0][i]['denomination'],\n                        response[0][i]['iDate'],\n                        '$' + parseFloat(response[0][i]['iPrice']).toFixed(2),\n                        response[0][i]['aDate'],\n                        response[0][i]['mDate'],\n                        '$' + parseFloat(response[0][i]['value']).toFixed(2),\n                        '$' + parseFloat(response[0][i]['interest']).toFixed(2)\n                    ])\n                }\n\n                exports.push([\n                    \"\",\n                    \"\",\n                    \"\",\n                    '$' + response[1]['totalDenominations'],\n                    \"\",\n                    \"\",\n                    \"\",\n                    '$' + parseFloat(response[1]['totalPrices']).toFixed(2),\n                    '$' + parseFloat(response[1]['totalInterests']).toFixed(2),\n                    '$' + parseFloat(response[1]['totalValues']).toFixed(2)\n                ])\n\n                this.setState({\n                    totalDate: this.formatDate(response[1]['totalDate']),\n                    totalDenomination: response[1]['totalDenominations'],\n                    totalPrice: response[1]['totalPrices'],\n                    totalInterest: response[1]['totalInterests'],\n                    totalValue: response[1]['totalValues']\n                })\n\n                this.setState({ exportResults: exports })\n            })\n    }\n\n    appendToTable(currentBond) {\n        const bondTable = document.getElementById('bond-table')\n\n        let bondBody = null\n\n        if (bondTable.getElementsByTagName('tbody').length === 0) {\n            bondBody = document.createElement('tbody')\n            bondTable.append(bondBody)\n        }\n        else {\n            bondBody = bondTable.getElementsByTagName('tbody')[0]\n        }\n\n        if (currentBond['interest'] < 0) {\n            currentBond['interest'] = 0\n        }\n\n        bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible'\n\n        let bondRow = bondBody.insertRow();\n        bondRow.className = \"bond-row\"\n        bondRow.style.textAlign = 'center'\n\n        bondRow.insertCell(0).innerHTML = currentBond['serialNumber']\n        bondRow.insertCell(1).innerHTML = currentBond['series']\n\n        let cell2 = bondRow.insertCell(2)\n        cell2.className = 'bond-denomination'\n        cell2.innerHTML = '$' + this.convertValues(currentBond['denomination'])\n\n        bondRow.insertCell(3).innerHTML = currentBond['iDate']\n        bondRow.insertCell(4).innerHTML = currentBond['aDate']\n        bondRow.insertCell(5).innerHTML = currentBond['mDate']\n\n        let cell6 = bondRow.insertCell(6)\n        cell6.className = 'bond-price'\n        cell6.innerHTML = '$' + this.convertValues(parseFloat(currentBond['iPrice']).toFixed(2))\n\n        let cell7 = bondRow.insertCell(7)\n        cell7.className = 'bond-interest'\n        cell7.innerHTML = '$' + this.convertValues(parseFloat(currentBond['interest']).toFixed(2))\n\n        let cell8 = bondRow.insertCell(8)\n        cell8.className = 'bond-value'\n        cell8.innerHTML = '$' + this.convertValues(parseFloat(currentBond['value']).toFixed(2))\n        cell8.style.position = 'relative'\n\n        let span = document.createElement('span')\n        span.innerHTML = '&times;'\n        span.setAttribute('aria-hidden', 'true')\n        span.style.border = 'none';\n\n        let button = document.createElement('button')\n        button.onclick = () => { this.handleClickX(button) };\n        button.className = 'close'\n        button.style.position = 'absolute'\n        button.style.right = '-1em'\n\n        button.append(span);\n        cell8.append(button);\n\n        this.exportData()\n    }\n\n    setFilename(e) {\n        if (e.target.files.length > 0) {\n            this.setState({ label: e.target.files[0].name })\n        }\n\n        if (this.state.hideTable) {\n            this.setState({ hideTable: false, showCards: { visibility: 'visible' } })\n        }\n\n        let vMonth = document.getElementsByName('aMonth')[0].value\n        let vYear = document.getElementsByName('aYear')[0].value\n\n        var reader = new FileReader();\n\n        reader.onload = () => {\n            const bonds = reader.result\n\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n                body: JSON.stringify({ bonds, vMonth, vYear })\n            };\n\n            fetch('http://localhost:5000/upload', requestOptions)\n                .then(response => response.json())\n                .then(response => {\n                    let exports = []\n\n                    exports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value'])\n\n                    for (let i = 0; i < response[0].length; i++) {\n                        let values = [\n                            response[0][i]['vDate'],\n                            response[0][i]['serialNumber'],\n                            response[0][i]['series'],\n                            '$' + response[0][i]['denomination'],\n                            response[0][i]['iDate'],\n                            '$' + parseFloat(response[0][i]['iPrice']).toFixed(2),\n                            response[0][i]['aDate'],\n                            response[0][i]['mDate'],\n                            '$' + parseFloat(response[0][i]['value']).toFixed(2),\n                            '$' + parseFloat(response[0][i]['interest']).toFixed(2)\n                        ]\n\n                        exports.push(values);\n                    }\n\n                    this.setState({\n                        totalDate: this.formatDate(response[1]['totalDate']),\n                        totalDenomination: response[1]['totalDenominations'],\n                        totalPrice: response[1]['totalPrices'],\n                        totalInterest: response[1]['totalInterests'],\n                        totalValue: response[1]['totalValues']\n                    })\n\n                    exports.push([\n                        \"\",\n                        \"\",\n                        \"\",\n                        '$' + response[1]['totalDenominations'],\n                        \"\",\n                        \"\",\n                        \"\",\n                        '$' + parseFloat(response[1]['totalPrices']).toFixed(2),\n                        '$' + parseFloat(response[1]['totalInterests']).toFixed(2),\n                        '$' + parseFloat(response[1]['totalValues']).toFixed(2)\n                    ])\n\n                    this.setState({ bonds: response[0], exportResults: exports })\n                })\n        }\n\n        reader.readAsText(e.target.files[0]);\n    }\n\n    convertValues(value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Form className=\"form-csv\" style={{ position: 'relative' }}>\n                    <Form.Row style={{ float: 'left', width: '30%' }}>\n                        <Col>\n                            <Form.Label>VALUE AS OF</Form.Label>\n                            <InputGroup>\n                                <Form.Control\n                                    required\n                                    name=\"aMonth\"\n                                    type=\"number\"\n                                    placeholder=\"Month\"\n                                    min=\"1\"\n                                    max=\"12\"\n                                    defaultValue={this.state.month}\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                </InputGroup.Append>\n                                <Form.Control\n                                    required\n                                    name=\"aYear\"\n                                    type=\"number\"\n                                    placeholder=\"Year\"\n                                    maxLength=\"4\"\n                                    min=\"1992\"\n                                    max={this.state.year}\n                                    style={{ marginLeft: '-1px' }}\n                                    defaultValue={this.state.year}\n                                />\n                            </InputGroup>\n                            <OverlayTrigger placement='right' overlay={\n                                <Tooltip style={this.state.showTooltip} >\n                                    Revalue all bonds by this date.\n                                    </Tooltip>}>\n                                <Button type=\"button\" size='sm' variant='success' onMouseEnter={this.onUpdateEnter} onClick={this.onUpdateClick} style={{ position: 'absolute', top: '0', right: '.5em', fontSize: '.65em', fontWeight: 'bold' }}>UPDATE</Button>\n                            </OverlayTrigger>\n                        </Col>\n                    </Form.Row>\n                    <Form.Row>\n                        <Col style={{ marginLeft: '2em' }}>\n                            <Form.Label>ATTACHMENT</Form.Label>\n                            <Form.File\n                                id=\"custom-file\"\n                                label={this.state.label}\n                                onChange={this.setFilename}\n                                custom\n                            />\n                        </Col>\n                    </Form.Row>\n                </Form>\n                <div style={{ width: '70%', margin: 'auto' }}>\n                    <div id=\"card-container\" style={{ width: '100%', float: 'left', paddingTop: '1em' }}>\n                        {this.state.exportResults.length > 0 ? <div onClick={this.exportOnClick} style={{ width: '100%', textAlign: 'right', marginBottom: '.25em' }}>\n                            <CSVLink filename={'bonds_valued_from_' + this.state.month + '_' + this.state.year} data={this.state.exportResults.length > 0 ? this.state.exportResults : ''}>+ [Export]</CSVLink>\n                        </div> : null}\n                        <Row>\n                            <Col>\n                                <Card style={this.state.showCards}>\n                                    <Card.Header className='card-header'>VALUED AS OF</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title>{this.state.totalDate}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <Card style={this.state.showCards}>\n                                    <Card.Header className='card-header'>TOTAL FACE VALUE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title>${this.convertValues(this.state.totalDenomination)}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <Card style={this.state.showCards}>\n                                    <Card.Header className='card-header'>TOTAL COST</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-price\" style={{ color: 'red' }}>${this.convertValues(parseFloat(this.state.totalPrice).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <Card style={this.state.showCards}>\n                                    <Card.Header className='card-header'>TOTAL INTEREST</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-interest\" style={{ color: '#ff8c00' }}>${this.convertValues(parseFloat(this.state.totalInterest).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col>\n                                <Card style={this.state.showCards}>\n                                    <Card.Header className='card-header'>TOTAL VALUE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-value\" style={{ color: 'green' }}>${this.convertValues(parseFloat(this.state.totalValue).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div >\n                    <div style={{ width: '100%', float: 'left', margin: '1em 0' }}>\n                        {\n                            this.state.bonds.length > 0 ?\n                                <React.Fragment>\n                                    <Table striped bordered hover id=\"bond-table\" hidden={this.state.hideTable} onChange={this.state.changeTable} style={{ width: '100%', margin: 'auto' }}>\n                                        <thead style={{ textAlign: \"center\", fontSize: \".75em\", textTransform: \"uppercase\" }}>\n                                            <tr>\n                                                <th>Serial Number</th>\n                                                <th>Bond Type</th>\n                                                <th>Bond Amount</th>\n                                                <th>Issue Date</th>\n                                                <th>Next Accrual</th>\n                                                <th>Final Maturity</th>\n                                                <th>Issue Price</th>\n                                                <th>Interest</th>\n                                                <th>Value</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {this.state.bonds\n                                                //.slice(this.state.currentPage * 5, (this.state.currentPage + 1) * 5)\n                                                .map((bond, i) => (\n                                                    <tr key={i}>\n                                                        <td>{bond['serialNumber']}</td>\n                                                        <td>{bond['series']}</td>\n                                                        <td>${this.convertValues(bond['denomination'])}</td>\n                                                        <td>{bond['iDate']}</td>\n                                                        <td>{bond['aDate']}</td>\n                                                        <td>{bond['mDate']}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['iPrice']).toFixed(2))}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['interest']).toFixed(2))}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['value']).toFixed(2))}</td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </Table>\n                                    {/*this.state.bonds.length > 0 ?\n                                        <Pagination size='sm'>\n                                            {this.state.bondCount.map((i) => (\n                                                <React.Fragment>\n                                                    <Pagination.Item active={i === this.state.currentPage} key={i + 1} onClick={() => this.setCurrentPage(i)}>{i + 1}</Pagination.Item>\n                                                </React.Fragment>\n                                            ))}\n                                        </Pagination> : null*/}\n                                </React.Fragment>\n                                : null}\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BondPricingTwo;\n"]},"metadata":{},"sourceType":"module"}