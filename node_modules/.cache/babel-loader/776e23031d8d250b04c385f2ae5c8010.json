{"ast":null,"code":"var _jsxFileName = \"/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing.jsx\";\nimport React, { Component } from 'react';\nimport { Form, Col, Row, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css';\n\nclass BondPricingOne extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalPrice: 0,\n      totalInterest: 0,\n      totalValue: 0,\n      totalDenomination: 0,\n      totalDate: null,\n      month: this.getCurrentMonth(),\n      year: this.getCurrentYear(),\n      showTooltip: {\n        visibility: 'visible'\n      },\n      showCards: {\n        visibility: 'hidden'\n      },\n      hideTable: true,\n      export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n      exportResults: []\n    };\n    this.onUpdateEnter = this.onUpdateEnter.bind(this);\n    this.onUpdateClick = this.onUpdateClick.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.appendToTable = this.appendToTable.bind(this);\n    this.exportData = this.exportData.bind(this);\n  }\n\n  formatDate(value_date) {\n    const months = {\n      \"01\": \"Jan.\",\n      \"02\": \"Feb.\",\n      \"03\": \"March\",\n      \"04\": \"April\",\n      \"05\": \"May\",\n      \"06\": \"June\",\n      \"07\": \"July\",\n      \"08\": \"Aug.\",\n      \"09\": \"Sept\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    let month = value_date.split('/')[0];\n    let year = value_date.split('/')[1];\n    let month_string = months[month] + ' 1, ' + year;\n    return month_string;\n  }\n\n  getCurrentMonth() {\n    let d = new Date();\n    return d.getMonth() + 1;\n  }\n\n  getCurrentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  handleClickX(element) {\n    element.parentNode.parentNode.remove();\n    this.onUpdateClick();\n  }\n\n  appendToTable(currentBond) {\n    const bondTable = document.getElementById('bond-table');\n    let bondBody = null;\n\n    if (bondTable.getElementsByTagName('tbody').length === 0) {\n      bondBody = document.createElement('tbody');\n      bondTable.append(bondBody);\n    } else {\n      bondBody = bondTable.getElementsByTagName('tbody')[0];\n    }\n\n    bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible';\n    let bondRow = bondBody.insertRow();\n    bondRow.className = \"bond-row\";\n    bondRow.style.textAlign = 'center';\n    bondRow.insertCell(0).innerHTML = currentBond['serialNumber'];\n    bondRow.insertCell(1).innerHTML = currentBond['series'];\n    let cell2 = bondRow.insertCell(2);\n    cell2.className = 'bond-denomination';\n    cell2.innerHTML = '$' + currentBond['denomination'];\n    bondRow.insertCell(3).innerHTML = currentBond['iDate'];\n    bondRow.insertCell(4).innerHTML = currentBond['aDate'];\n    bondRow.insertCell(5).innerHTML = currentBond['mDate'];\n    let cell6 = bondRow.insertCell(6);\n    cell6.className = 'bond-price';\n    cell6.innerHTML = '$' + parseFloat(currentBond['iPrice']).toFixed(2);\n    let cell7 = bondRow.insertCell(7);\n    cell7.className = 'bond-interest';\n    cell7.innerHTML = '$' + parseFloat(currentBond['interest']).toFixed(2);\n    let cell8 = bondRow.insertCell(8);\n    cell8.className = 'bond-value';\n    cell8.innerHTML = '$' + currentBond['value'];\n    cell8.style.position = 'relative';\n    let span = document.createElement('span');\n    span.innerHTML = '&times;';\n    span.setAttribute('aria-hidden', 'true');\n    span.style.border = 'none';\n    let button = document.createElement('button');\n\n    button.onclick = () => {\n      this.handleClickX(button);\n    };\n\n    button.className = 'close';\n    button.style.position = 'absolute';\n    button.style.right = '-1em';\n    button.append(span);\n    cell8.append(button);\n    this.exportData();\n  }\n\n  onUpdateEnter(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      this.setState({\n        showTooltip: {\n          visibility: 'hidden'\n        }\n      });\n    }, 3500);\n  }\n\n  onUpdateClick() {\n    let rows = document.getElementById('bond-table').getElementsByTagName('tr');\n    let bonds = [];\n    let vMonth = document.getElementsByName('aMonth')[0].value;\n    let vYear = document.getElementsByName('aYear')[0].value;\n\n    for (let i = 1; i < rows.length; i++) {\n      let series = rows[i].getElementsByTagName('td')[1].innerHTML;\n      let denomination = rows[i].getElementsByTagName('td')[2].innerHTML.substring(1);\n      let serialNumber = rows[i].getElementsByTagName('td')[0].innerHTML;\n      let iMonth = parseInt(rows[i].getElementsByTagName('td')[3].innerHTML.split('/')[0]);\n      let iYear = rows[i].getElementsByTagName('td')[3].innerHTML.split('/')[1];\n      let bond = {\n        'vMonth': vMonth,\n        'vYear': vYear,\n        'series': series,\n        'denomination': denomination,\n        'serialNumber': serialNumber,\n        'iMonth': iMonth.toString(),\n        'iYear': iYear\n      };\n      bonds.push(bond);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      let bondRows = document.getElementById('bond-table').getElementsByTagName('tbody')[0];\n      bondRows.remove();\n      let exports = [[\"Value as of\", \"Serial #\", \"Series\", \"Denomination\", \"Issue Date\", \"Next Accrual\", \"Final Maturity\", \"Issue Price\", \"Interest\", \"Value\"]];\n\n      for (let i = 0; i < response[0].length; i++) {\n        this.appendToTable(response[0][i]);\n        exports.push([response[0][i]['vDate'], response[0][i]['serialNumber'], response[0][i]['series'], '$' + response[0][i]['denomination'], response[0][i]['iDate'], '$' + response[0][i]['iPrice'], response[0][i]['aDate'], response[0][i]['mDate'], '$' + response[0][i]['value'], '$' + response[0][i]['interest']]);\n      }\n\n      exports.push([\"\", \"\", \"\", '$' + response[1]['totalDenominations'], \"\", \"\", \"\", '$' + parseFloat(response[1]['totalPrices']).toFixed(2), '$' + parseFloat(response[1]['totalInterests']).toFixed(2), '$' + parseFloat(response[1]['totalValues']).toFixed(2)]);\n      this.setState({\n        totalDate: this.formatDate(response[1]['totalDate']),\n        totalDenomination: response[1]['totalDenominations'],\n        totalPrice: response[1]['totalPrices'],\n        totalInterest: response[1]['totalInterests'],\n        totalValue: response[1]['totalValues']\n      });\n      this.setState({\n        exportResults: exports\n      });\n    });\n  }\n\n  exportData() {\n    let exports = this.state.export.split(',');\n    let export_data = [];\n    let i = 0;\n\n    while (i + 10 <= exports.length) {\n      export_data.push(exports.slice(i, i + 10));\n      i += 10;\n    }\n\n    export_data.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)]);\n    this.setState({\n      exportResults: export_data\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (this.state.hideTable) {\n      this.setState({\n        hideTable: false,\n        showCards: {\n          visibility: 'visible'\n        }\n      });\n    }\n\n    const series_map = {\n      'EE Bond': 'EE',\n      'E Bond': 'E',\n      'I Bond': 'I',\n      'Savings Bond': 'S'\n    };\n    let bond = {\n      'vMonth': e.target.aMonth.value,\n      'vYear': e.target.aYear.value,\n      'series': series_map[e.target.series.value],\n      'denomination': e.target.denomination.value.substring(1),\n      'serialNumber': e.target.serialnumber.value,\n      'iMonth': e.target.iMonth.value,\n      'iYear': e.target.iYear.value\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bond\n      })\n    };\n    fetch('http://localhost:5000/individual/bonds', requestOptions).then(response => response.json()).then(response => {\n      if (response['interest'][0] === '-') {\n        response['value'] = '$0';\n      }\n\n      this.appendToTable(response);\n      this.setState({\n        currentBond: response\n      });\n      let values = [response['vDate'], response['serialNumber'], response['series'], '$' + response['denomination'], response['iDate'], response['aDate'], response['mDate'], '$' + response['iPrice'], '$' + response['interest'], '$' + response['value']];\n      this.setState({\n        totalDate: this.formatDate(response['vDate']),\n        totalDenomination: this.state.totalDenomination + parseFloat(response['denomination']),\n        totalPrice: this.state.totalPrice + parseFloat(response['iPrice']),\n        totalInterest: this.state.totalInterest + parseFloat(response['interest']),\n        totalValue: this.state.totalValue + parseFloat(response['value'])\n      });\n      this.setState({\n        export: this.state.export.concat(\",\" + values.toString())\n      });\n      this.exportData();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '70%',\n        margin: 'auto',\n        marginTop: '1.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      style: {\n        width: '100%',\n        fontSize: '14px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 29\n      }\n    }, \"VALUE AS OF\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: this.state.month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 37\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1992\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: this.state.year,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(OverlayTrigger, {\n      placement: \"right\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        style: this.state.showTooltip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 33\n        }\n      }, \"Revalue all bonds by this date.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      size: \"sm\",\n      variant: \"success\",\n      onMouseEnter: this.onUpdateEnter,\n      onClick: this.onUpdateClick,\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '1.5em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 33\n      }\n    }, \"UPDATE\"))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 29\n      }\n    }, \"SERIES\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"series\",\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 33\n      }\n    }, \"EE Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 33\n      }\n    }, \"I Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 33\n      }\n    }, \"E Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 33\n      }\n    }, \"Savings Note\"))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 29\n      }\n    }, \"DENOMINATION\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"denomination\",\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 33\n      }\n    }, \"$25\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 33\n      }\n    }, \"$50\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 33\n      }\n    }, \"$75\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 33\n      }\n    }, \"$100\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 33\n      }\n    }, \"$200\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 33\n      }\n    }, \"$500\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 33\n      }\n    }, \"$1,000\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 33\n      }\n    }, \"$5,000\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 33\n      }\n    }, \"$10,000\"))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 29\n      }\n    }, \"SERIAL NUMBER\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"serialnumber\",\n      type: \"text\",\n      placeholder: \"Optional\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 29\n      }\n    }, \"ISSUE DATE\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"iMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      maxLength: \"2\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: \"11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 37\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"iYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1940\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: \"2005\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      size: \"sm\",\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '.5em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 29\n      }\n    }, \"SUBMIT\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"card-container\",\n      style: {\n        width: '100%',\n        float: 'left',\n        paddingTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }\n    }, this.state.exportResults.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        textAlign: 'right',\n        marginBottom: '.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 60\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: 'bonds_valued_from_' + this.state.month + '_' + this.state.year,\n      data: this.state.exportResults.length > 0 ? this.state.exportResults : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 25\n      }\n    }, \"+ [Export]\")) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 33\n      }\n    }, \"VALUED AS OF\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 37\n      }\n    }, this.state.totalDate)))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 33\n      }\n    }, \"TOTAL FACE VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 37\n      }\n    }, \"$\", this.state.totalDenomination)))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 33\n      }\n    }, \"TOTAL COST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-price\",\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 37\n      }\n    }, \"$\", parseFloat(this.state.totalPrice).toFixed(2))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 33\n      }\n    }, \"TOTAL INTEREST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-interest\",\n      style: {\n        color: '#ff8c00'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 37\n      }\n    }, \"$\", parseFloat(this.state.totalInterest).toFixed(2))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 33\n      }\n    }, \"TOTAL VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-value\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 37\n      }\n    }, \"$\", parseFloat(this.state.totalValue).toFixed(2))))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        float: 'left',\n        marginTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      id: \"bond-table\",\n      hidden: this.state.hideTable,\n      onChange: this.state.changeTable,\n      style: {\n        width: '100%',\n        margin: 'auto',\n        marginBottom: '2em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \"11px\",\n        textTransform: \"uppercase\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 33\n      }\n    }, \"Serial Number\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 33\n      }\n    }, \"Series\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 33\n      }\n    }, \"Denomination\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 33\n      }\n    }, \"Issue Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 33\n      }\n    }, \"Next Accrual\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 33\n      }\n    }, \"Final Maturity\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 33\n      }\n    }, \"Issue Price\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 33\n      }\n    }, \"Interest\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 33\n      }\n    }, \"Value\"))))));\n  }\n\n}\n\nexport default BondPricingOne;","map":{"version":3,"sources":["/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing.jsx"],"names":["React","Component","Form","Col","Row","InputGroup","Button","OverlayTrigger","Tooltip","Table","Card","CSVLink","BondPricingOne","constructor","props","state","totalPrice","totalInterest","totalValue","totalDenomination","totalDate","month","getCurrentMonth","year","getCurrentYear","showTooltip","visibility","showCards","hideTable","export","exportResults","onUpdateEnter","bind","onUpdateClick","onSubmit","formatDate","appendToTable","exportData","value_date","months","split","month_string","d","Date","getMonth","getFullYear","handleClickX","element","parentNode","remove","currentBond","bondTable","document","getElementById","bondBody","getElementsByTagName","length","createElement","append","style","bondRow","insertRow","className","textAlign","insertCell","innerHTML","cell2","cell6","parseFloat","toFixed","cell7","cell8","position","span","setAttribute","border","button","onclick","right","e","preventDefault","setTimeout","setState","rows","bonds","vMonth","getElementsByName","value","vYear","i","series","denomination","substring","serialNumber","iMonth","parseInt","iYear","bond","toString","push","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","bondRows","exports","export_data","slice","series_map","target","aMonth","aYear","serialnumber","values","concat","render","width","margin","marginTop","fontSize","marginLeft","top","fontWeight","float","paddingTop","marginBottom","color","changeTable","textTransform"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Col, Row, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css'\n\nclass BondPricingOne extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalPrice: 0,\n            totalInterest: 0,\n            totalValue: 0,\n            totalDenomination: 0,\n            totalDate: null,\n            month: this.getCurrentMonth(),\n            year: this.getCurrentYear(),\n            showTooltip: { visibility: 'visible' },\n            showCards: { visibility: 'hidden' },\n            hideTable: true,\n            export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n            exportResults: []\n        };\n\n        this.onUpdateEnter = this.onUpdateEnter.bind(this)\n        this.onUpdateClick = this.onUpdateClick.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.formatDate = this.formatDate.bind(this)\n        this.appendToTable = this.appendToTable.bind(this)\n        this.exportData = this.exportData.bind(this)\n    }\n\n    formatDate(value_date) {\n        const months = { \"01\": \"Jan.\", \"02\": \"Feb.\", \"03\": \"March\", \"04\": \"April\", \"05\": \"May\", \"06\": \"June\", \"07\": \"July\", \"08\": \"Aug.\", \"09\": \"Sept\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\" }\n\n        let month = value_date.split('/')[0]\n        let year = value_date.split('/')[1]\n\n        let month_string = months[month] + ' 1, ' + year\n\n        return month_string\n    }\n\n    getCurrentMonth() {\n        let d = new Date();\n        return d.getMonth() + 1\n    }\n\n    getCurrentYear() {\n        let d = new Date();\n\n        return d.getFullYear()\n    }\n\n    handleClickX(element) {\n        element.parentNode.parentNode.remove()\n\n        this.onUpdateClick();\n    }\n\n    appendToTable(currentBond) {\n        const bondTable = document.getElementById('bond-table')\n\n        let bondBody = null\n\n        if (bondTable.getElementsByTagName('tbody').length === 0) {\n            bondBody = document.createElement('tbody')\n            bondTable.append(bondBody)\n        }\n        else {\n            bondBody = bondTable.getElementsByTagName('tbody')[0]\n        }\n\n        bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible'\n\n        let bondRow = bondBody.insertRow();\n        bondRow.className = \"bond-row\"\n        bondRow.style.textAlign = 'center'\n\n        bondRow.insertCell(0).innerHTML = currentBond['serialNumber']\n        bondRow.insertCell(1).innerHTML = currentBond['series']\n\n        let cell2 = bondRow.insertCell(2)\n        cell2.className = 'bond-denomination'\n        cell2.innerHTML = '$' + currentBond['denomination']\n\n        bondRow.insertCell(3).innerHTML = currentBond['iDate']\n        bondRow.insertCell(4).innerHTML = currentBond['aDate']\n        bondRow.insertCell(5).innerHTML = currentBond['mDate']\n\n        let cell6 = bondRow.insertCell(6)\n        cell6.className = 'bond-price'\n        cell6.innerHTML = '$' + parseFloat(currentBond['iPrice']).toFixed(2)\n\n        let cell7 = bondRow.insertCell(7)\n        cell7.className = 'bond-interest'\n        cell7.innerHTML = '$' + parseFloat(currentBond['interest']).toFixed(2)\n\n        let cell8 = bondRow.insertCell(8)\n        cell8.className = 'bond-value'\n        cell8.innerHTML = '$' + currentBond['value']\n        cell8.style.position = 'relative'\n\n        let span = document.createElement('span')\n        span.innerHTML = '&times;'\n        span.setAttribute('aria-hidden', 'true')\n        span.style.border = 'none';\n\n        let button = document.createElement('button')\n        button.onclick = () => { this.handleClickX(button) };\n        button.className = 'close'\n        button.style.position = 'absolute'\n        button.style.right = '-1em'\n\n        button.append(span);\n        cell8.append(button);\n\n        this.exportData()\n    }\n\n    onUpdateEnter(e) {\n        e.preventDefault();\n\n        setTimeout(() => {\n            this.setState({ showTooltip: { visibility: 'hidden' } })\n        }, 3500)\n    }\n\n    onUpdateClick() {\n        let rows = document.getElementById('bond-table').getElementsByTagName('tr')\n\n        let bonds = []\n\n        let vMonth = document.getElementsByName('aMonth')[0].value\n        let vYear = document.getElementsByName('aYear')[0].value\n\n        for (let i = 1; i < rows.length; i++) {\n            let series = rows[i].getElementsByTagName('td')[1].innerHTML\n            let denomination = (rows[i].getElementsByTagName('td')[2].innerHTML).substring(1)\n            let serialNumber = rows[i].getElementsByTagName('td')[0].innerHTML\n            let iMonth = parseInt((rows[i].getElementsByTagName('td')[3].innerHTML).split('/')[0])\n            let iYear = (rows[i].getElementsByTagName('td')[3].innerHTML).split('/')[1]\n\n            let bond = {\n                'vMonth': vMonth,\n                'vYear': vYear,\n                'series': series,\n                'denomination': denomination,\n                'serialNumber': serialNumber,\n                'iMonth': iMonth.toString(),\n                'iYear': iYear,\n            }\n\n            bonds.push(bond)\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                let bondRows = document.getElementById('bond-table').getElementsByTagName('tbody')[0]\n                bondRows.remove()\n\n                let exports = [[\"Value as of\", \"Serial #\", \"Series\", \"Denomination\", \"Issue Date\", \"Next Accrual\", \"Final Maturity\", \"Issue Price\", \"Interest\", \"Value\"]]\n\n                for (let i = 0; i < response[0].length; i++) {\n                    this.appendToTable(response[0][i])\n\n                    exports.push([\n                        response[0][i]['vDate'],\n                        response[0][i]['serialNumber'],\n                        response[0][i]['series'],\n                        '$' + response[0][i]['denomination'],\n                        response[0][i]['iDate'],\n                        '$' + response[0][i]['iPrice'],\n                        response[0][i]['aDate'],\n                        response[0][i]['mDate'],\n                        '$' + response[0][i]['value'],\n                        '$' + response[0][i]['interest']\n                    ])\n                }\n\n                exports.push([\n                    \"\",\n                    \"\",\n                    \"\",\n                    '$' + response[1]['totalDenominations'],\n                    \"\",\n                    \"\",\n                    \"\",\n                    '$' + parseFloat(response[1]['totalPrices']).toFixed(2),\n                    '$' + parseFloat(response[1]['totalInterests']).toFixed(2),\n                    '$' + parseFloat(response[1]['totalValues']).toFixed(2)\n                ])\n\n                this.setState({\n                    totalDate: this.formatDate(response[1]['totalDate']),\n                    totalDenomination: response[1]['totalDenominations'],\n                    totalPrice: response[1]['totalPrices'],\n                    totalInterest: response[1]['totalInterests'],\n                    totalValue: response[1]['totalValues']\n                })\n\n                this.setState({ exportResults: exports })\n            })\n    }\n\n    exportData() {\n        let exports = (this.state.export).split(',')\n\n        let export_data = []\n\n        let i = 0\n        while ((i + 10) <= exports.length) {\n            export_data.push(exports.slice(i, i + 10))\n            i += 10\n        }\n\n        export_data.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)])\n\n        this.setState({ exportResults: export_data })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.hideTable) {\n            this.setState({ hideTable: false, showCards: { visibility: 'visible' } })\n        }\n\n        const series_map = {\n            'EE Bond': 'EE',\n            'E Bond': 'E',\n            'I Bond': 'I',\n            'Savings Bond': 'S'\n        }\n\n        let bond = {\n            'vMonth': e.target.aMonth.value,\n            'vYear': e.target.aYear.value,\n            'series': series_map[e.target.series.value],\n            'denomination': (e.target.denomination.value).substring(1),\n            'serialNumber': e.target.serialnumber.value,\n            'iMonth': e.target.iMonth.value,\n            'iYear': e.target.iYear.value\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bond })\n        };\n\n        fetch('http://localhost:5000/individual/bonds', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                if (response['interest'][0] === '-') {\n                    response['value'] = '$0'\n                }\n\n                this.appendToTable(response)\n\n                this.setState({ currentBond: response })\n\n\n\n                let values = [\n                    response['vDate'],\n                    response['serialNumber'],\n                    response['series'],\n                    '$' + response['denomination'],\n                    response['iDate'],\n                    response['aDate'],\n                    response['mDate'],\n                    '$' + response['iPrice'],\n                    '$' + response['interest'],\n                    '$' + response['value']\n                ]\n\n                this.setState({\n                    totalDate: this.formatDate(response['vDate']),\n                    totalDenomination: this.state.totalDenomination + parseFloat(response['denomination']),\n                    totalPrice: this.state.totalPrice + parseFloat(response['iPrice']),\n                    totalInterest: this.state.totalInterest + parseFloat(response['interest']),\n                    totalValue: this.state.totalValue + parseFloat(response['value'])\n                })\n\n                this.setState({ export: this.state.export.concat(\",\" + values.toString()) })\n\n                this.exportData()\n            })\n    }\n\n    render() {\n        return (\n            <div style={{ width: '70%', margin: 'auto', marginTop: '1.5em' }}>\n                <Form onSubmit={this.onSubmit} style={{ width: '100%', fontSize: '14px' }}>\n                    <Form.Row>\n                        <Col className=\"col-padding\" style={{ position: 'relative' }}>\n                            <Form.Label>VALUE AS OF</Form.Label>\n                            <InputGroup>\n                                <Form.Control\n                                    required\n                                    name=\"aMonth\"\n                                    type=\"number\"\n                                    placeholder=\"Month\"\n                                    min=\"1\"\n                                    max=\"12\"\n                                    defaultValue={this.state.month}\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                </InputGroup.Append>\n                                <Form.Control\n                                    required\n                                    name=\"aYear\"\n                                    type=\"number\"\n                                    placeholder=\"Year\"\n                                    maxLength=\"4\"\n                                    min=\"1992\"\n                                    max={this.state.year}\n                                    style={{ marginLeft: '-1px' }}\n                                    defaultValue={this.state.year}\n                                />\n                            </InputGroup>\n                            <OverlayTrigger placement='right' overlay={\n                                <Tooltip style={this.state.showTooltip} >\n                                    Revalue all bonds by this date.\n                                    </Tooltip>}>\n                                <Button type=\"button\" size='sm' variant='success' onMouseEnter={this.onUpdateEnter} onClick={this.onUpdateClick} style={{ position: 'absolute', top: '0', right: '1.5em', fontSize: '.65em', fontWeight: 'bold' }}>UPDATE</Button>\n                            </OverlayTrigger>\n                        </Col>\n                        <Col className=\"col-padding\">\n                            <Form.Label>SERIES</Form.Label>\n                            <Form.Control name=\"series\" as=\"select\" custom>\n                                <option>EE Bond</option>\n                                <option>I Bond</option>\n                                <option>E Bond</option>\n                                <option>Savings Note</option>\n                            </Form.Control>\n                        </Col>\n                        <Col className=\"col-padding\">\n                            <Form.Label>DENOMINATION</Form.Label>\n                            <Form.Control name=\"denomination\" as=\"select\" custom>\n                                <option>$25</option>\n                                <option>$50</option>\n                                <option>$75</option>\n                                <option>$100</option>\n                                <option>$200</option>\n                                <option>$500</option>\n                                <option>$1,000</option>\n                                <option>$5,000</option>\n                                <option>$10,000</option>\n                            </Form.Control>\n                        </Col>\n                        <Col className=\"col-padding\">\n                            <Form.Label size='sm'>SERIAL NUMBER</Form.Label>\n                            <Form.Control\n                                name=\"serialnumber\"\n                                type=\"text\"\n                                placeholder=\"Optional\"\n                            />\n                        </Col>\n                        <Col style={{ position: 'relative' }}>\n                            <Form.Label>ISSUE DATE</Form.Label>\n                            <InputGroup>\n                                <Form.Control\n                                    required\n                                    name=\"iMonth\"\n                                    type=\"number\"\n                                    placeholder=\"Month\"\n                                    maxLength=\"2\"\n                                    min=\"1\"\n                                    max=\"12\"\n                                    defaultValue=\"11\"\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                </InputGroup.Append>\n                                <Form.Control\n                                    required\n                                    name=\"iYear\"\n                                    type=\"number\"\n                                    placeholder=\"Year\"\n                                    maxLength=\"4\"\n                                    min=\"1940\"\n                                    max={this.state.year}\n                                    style={{ marginLeft: '-1px' }}\n                                    defaultValue=\"2005\"\n                                />\n                            </InputGroup>\n                            <Button type=\"submit\" size='sm' style={{ position: 'absolute', top: '0', right: '.5em', fontSize: '.65em', fontWeight: 'bold' }}>SUBMIT</Button>\n                        </Col>\n                    </Form.Row>\n                </Form >\n                <div id=\"card-container\" style={{ width: '100%', float: 'left', paddingTop: '1em' }}>\n                    {this.state.exportResults.length > 0 ? <div style={{ width: '100%', textAlign: 'right', marginBottom: '.25em' }}>\n                        <CSVLink filename={'bonds_valued_from_' + this.state.month + '_' + this.state.year} data={this.state.exportResults.length > 0 ? this.state.exportResults : ''}>+ [Export]</CSVLink>\n                    </div> : null}\n                    <Row>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>VALUED AS OF</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title>{this.state.totalDate}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL FACE VALUE</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title>${this.state.totalDenomination}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL COST</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-price\" style={{ color: 'red' }}>${parseFloat(this.state.totalPrice).toFixed(2)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL INTEREST</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-interest\" style={{ color: '#ff8c00' }}>${parseFloat(this.state.totalInterest).toFixed(2)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL VALUE</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-value\" style={{ color: 'green' }}>${parseFloat(this.state.totalValue).toFixed(2)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div >\n                <div style={{ width: '100%', float: 'left', marginTop: '1em' }}>\n                    <Table striped bordered hover id=\"bond-table\" hidden={this.state.hideTable} onChange={this.state.changeTable} style={{ width: '100%', margin: 'auto', marginBottom: '2em' }}>\n                        <thead style={{ textAlign: \"center\", fontSize: \"11px\", textTransform: \"uppercase\" }}>\n                            <tr>\n                                <th>Serial Number</th>\n                                <th>Series</th>\n                                <th>Denomination</th>\n                                <th>Issue Date</th>\n                                <th>Next Accrual</th>\n                                <th>Final Maturity</th>\n                                <th>Issue Price</th>\n                                <th>Interest</th>\n                                <th>Value</th>\n                            </tr>\n                        </thead>\n                    </Table>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BondPricingOne;\n\n"]},"metadata":{},"sourceType":"module"}