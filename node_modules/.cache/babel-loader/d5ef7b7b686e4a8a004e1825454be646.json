{"ast":null,"code":"var _jsxFileName = \"/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_individual.jsx\";\nimport React, { Component } from 'react';\nimport { Form, Col, Row, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card, Pagination } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css';\n\nclass BondPricingOne extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalPrice: 0,\n      totalInterest: 0,\n      totalValue: 0,\n      totalDenomination: 0,\n      totalDate: null,\n      month: this.getCurrentMonth(),\n      year: this.getCurrentYear(),\n      showTooltip: {\n        visibility: 'visible'\n      },\n      showCards: {\n        visibility: 'hidden'\n      },\n      hideTable: true,\n      export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n      exportResults: [],\n      pages: [],\n      perPage: 5,\n      currentPage: 0\n    };\n    this.onUpdateEnter = this.onUpdateEnter.bind(this);\n    this.onUpdateClick = this.onUpdateClick.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.appendToTable = this.appendToTable.bind(this);\n    this.setPrevPage = this.setPrevPage.bind(this);\n    this.setCurrentPage = this.setCurrentPage.bind(this);\n    this.setNextPage = this.setNextPage.bind(this);\n    this.exportOnClick = this.exportOnClick.bind(this);\n    this.handleClickX = this.handleClickX.bind(this);\n  }\n\n  setPages(bonds) {\n    let pages = [];\n    let pageCount = bonds.length / this.state.perPage;\n    let i = 0;\n\n    while (i < pageCount) {\n      pages.push(i);\n      i++;\n    }\n\n    this.setState({\n      pages: pages\n    });\n  }\n\n  exportOnClick() {\n    const bonds = this.state.bonds;\n    let bondExports = [];\n    bondExports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value']);\n\n    for (let i = 0; i < bonds.length; i++) {\n      let bondExport = [bonds[i]['vDate'], bonds[i]['serialNumber'], bonds[i]['series'], '$' + bonds[i]['denomination'], bonds[i]['iDate'], bonds[i]['aDate'], bonds[i]['mDate'], '$' + parseFloat(bonds[i]['iPrice']).toFixed(2), '$' + parseFloat(bonds[i]['interest']).toFixed(2), '$' + parseFloat(bonds[i]['value']).toFixed(2)];\n      bondExports.push(bondExport);\n    }\n\n    bondExports.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)]);\n    this.setState({\n      exportResults: bondExports\n    });\n  }\n\n  setCurrentPage(i) {\n    this.setState({\n      currentPage: i\n    });\n  }\n\n  setPrevPage() {\n    let showCount = (this.state.currentPage - 1) * this.state.perPage;\n\n    if (showCount >= 0) {\n      this.setState({\n        currentPage: this.state.currentPage - 1\n      });\n    }\n  }\n\n  setNextPage() {\n    let showCount = (this.state.currentPage + 1) * this.state.perPage;\n\n    if (showCount < this.state.bonds.length) {\n      this.setState({\n        currentPage: this.state.currentPage + 1\n      });\n    }\n  }\n\n  formatDate(value_date) {\n    const months = {\n      \"01\": \"Jan.\",\n      \"02\": \"Feb.\",\n      \"03\": \"March\",\n      \"04\": \"April\",\n      \"05\": \"May\",\n      \"06\": \"June\",\n      \"07\": \"July\",\n      \"08\": \"Aug.\",\n      \"09\": \"Sept\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    let month = value_date.split('/')[0];\n    let year = value_date.split('/')[1];\n    let month_string = months[month] + ' 1, ' + year;\n    return month_string;\n  }\n\n  getCurrentMonth() {\n    let d = new Date();\n    return d.getMonth() + 1;\n  }\n\n  getCurrentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  handleClickX(element) {\n    element.parentNode.parentNode.remove();\n\n    if (document.getElementById('bond-table').getElementsByClassName('bond-row').length > 0) {\n      this.onUpdateClick();\n    } else {\n      this.setState({\n        totalPrice: 0,\n        totalInterest: 0,\n        totalValue: 0,\n        totalDenomination: 0\n      });\n    }\n  }\n\n  appendToTable(currentBond) {\n    const bondTable = document.getElementById('bond-table');\n    let bondBody = null;\n\n    if (bondTable.getElementsByTagName('tbody').length === 0) {\n      bondBody = document.createElement('tbody');\n      bondTable.append(bondBody);\n    } else {\n      bondBody = bondTable.getElementsByTagName('tbody')[0];\n    }\n\n    if (currentBond['interest'] < 0) {\n      currentBond['interest'] = 0;\n    }\n\n    bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible';\n    let bondRow = bondBody.insertRow();\n    bondRow.className = \"bond-row\";\n    bondRow.style.textAlign = 'center';\n    bondRow.insertCell(0).innerHTML = currentBond['serialNumber'];\n    bondRow.insertCell(1).innerHTML = currentBond['series'];\n    let cell2 = bondRow.insertCell(2);\n    cell2.className = 'bond-denomination';\n    cell2.innerHTML = '$' + this.convertValues(currentBond['denomination']);\n    bondRow.insertCell(3).innerHTML = currentBond['iDate'];\n    bondRow.insertCell(4).innerHTML = currentBond['aDate'];\n    bondRow.insertCell(5).innerHTML = currentBond['mDate'];\n    let cell6 = bondRow.insertCell(6);\n    cell6.className = 'bond-price';\n    cell6.innerHTML = '$' + this.convertValues(parseFloat(currentBond['iPrice']).toFixed(2));\n    let cell7 = bondRow.insertCell(7);\n    cell7.className = 'bond-interest';\n    cell7.innerHTML = '$' + this.convertValues(parseFloat(currentBond['interest']).toFixed(2));\n    let cell8 = bondRow.insertCell(8);\n    cell8.className = 'bond-value';\n    cell8.innerHTML = '$' + this.convertValues(parseFloat(currentBond['value']).toFixed(2));\n    cell8.style.position = 'relative';\n    let span = document.createElement('span');\n    span.innerHTML = '&times;';\n    span.setAttribute('aria-hidden', 'true');\n    span.style.border = 'none';\n    let button = document.createElement('button');\n\n    button.onclick = () => {\n      this.handleClickX(button);\n    };\n\n    button.className = 'close';\n    button.style.position = 'absolute';\n    button.style.right = '-1em';\n    button.append(span);\n    cell8.append(button);\n    this.exportData();\n  }\n\n  onUpdateEnter(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      this.setState({\n        showTooltip: {\n          visibility: 'hidden'\n        }\n      });\n    }, 3500);\n  }\n\n  onUpdateClick() {\n    const bondState = this.state.bonds;\n    let bonds = [];\n\n    for (let i = 0; i < bondState.length; i++) {\n      let bond = {\n        'vMonth': document.getElementsByName('aMonth')[0].value,\n        'vYear': document.getElementsByName('aYear')[0].value,\n        'series': this.state.bonds[i]['series'],\n        'denomination': this.state.bonds[i]['denomination'],\n        'serialNumber': this.state.bonds[i]['serialNumber'],\n        'iDate': this.state.bonds[i]['iDate']\n      };\n      bonds.push(bond);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      this.setState({\n        totalDate: this.formatDate(response[1]['totalDate']),\n        totalDenomination: response[1]['totalDenominations'],\n        totalPrice: response[1]['totalPrices'],\n        totalInterest: response[1]['totalInterests'],\n        totalValue: response[1]['totalValues']\n      });\n      this.setState({\n        bonds: response[0]\n      });\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    if (this.state.hideTable) {\n      this.setState({\n        hideTable: false,\n        showCards: {\n          visibility: 'visible'\n        }\n      });\n    }\n\n    const series_map = {\n      'EE Bond': 'EE',\n      'E Bond': 'E',\n      'I Bond': 'I',\n      'Savings Bond': 'S'\n    };\n    let bond = {\n      'vMonth': e.target.aMonth.value,\n      'vYear': e.target.aYear.value,\n      'series': series_map[e.target.series.value],\n      'denomination': e.target.denomination.value.substring(1),\n      'serialNumber': e.target.serialnumber.value,\n      'iMonth': e.target.iMonth.value,\n      'iYear': e.target.iYear.value\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bond\n      })\n    };\n    fetch('http://localhost:5000/individual/bonds', requestOptions).then(response => response.json()).then(response => {\n      this.appendToTable(response);\n      this.setState({\n        currentBond: response\n      });\n      let values = [response['vDate'], response['serialNumber'], response['series'], '$' + response['denomination'], response['iDate'], response['aDate'], response['mDate'], '$' + response['iPrice'], '$' + response['interest'], '$' + response['value']];\n      this.setState({\n        totalDate: this.formatDate(response['vDate']),\n        totalDenomination: this.state.totalDenomination + parseFloat(response['denomination']),\n        totalPrice: this.state.totalPrice + parseFloat(response['iPrice']),\n        totalInterest: this.state.totalInterest + parseFloat(response['interest']),\n        totalValue: this.state.totalValue + parseFloat(response['value'])\n      });\n      this.setState({\n        export: this.state.export.concat(\",\" + values.toString())\n      });\n      this.exportData();\n    });\n  }\n\n  convertValues(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '70%',\n        margin: 'auto',\n        marginTop: '1.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      style: {\n        width: '100%',\n        fontSize: '14px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 29\n      }\n    }, \"VALUE AS OF\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: this.state.month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 37\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1992\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: this.state.year,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(OverlayTrigger, {\n      placement: \"right\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        style: this.state.showTooltip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 33\n        }\n      }, \"Revalue all bonds by this date.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      size: \"sm\",\n      variant: \"success\",\n      onMouseEnter: this.onUpdateEnter,\n      onClick: this.onUpdateClick,\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '1.5em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 33\n      }\n    }, \"UPDATE\"))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 29\n      }\n    }, \"SERIES\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"series\",\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 33\n      }\n    }, \"EE Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 33\n      }\n    }, \"I Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 33\n      }\n    }, \"E Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }, \"Savings Note\"))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 29\n      }\n    }, \"DENOMINATION\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"denomination\",\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 33\n      }\n    }, \"$25\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 33\n      }\n    }, \"$50\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 33\n      }\n    }, \"$75\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 33\n      }\n    }, \"$100\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 33\n      }\n    }, \"$200\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 33\n      }\n    }, \"$500\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 33\n      }\n    }, \"$1,000\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 33\n      }\n    }, \"$5,000\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 33\n      }\n    }, \"$10,000\"))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 29\n      }\n    }, \"SERIAL NUMBER\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"serialnumber\",\n      type: \"text\",\n      placeholder: \"Optional\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 29\n      }\n    }, \"ISSUE DATE\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"iMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      maxLength: \"2\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: \"11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 37\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"iYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1940\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: \"2005\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      size: \"sm\",\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '.5em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 29\n      }\n    }, \"SUBMIT\")))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"card-container\",\n      style: {\n        width: '100%',\n        float: 'left',\n        paddingTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 17\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.exportOnClick,\n      style: {\n        width: '100%',\n        textAlign: 'right',\n        marginBottom: '.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 52\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: 'bonds_valued_from_' + this.state.month + '_' + this.state.year,\n      data: this.state.exportResults.length > 0 ? this.state.exportResults : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 25\n      }\n    }, \"+ [Export]\")) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 33\n      }\n    }, \"VALUED AS OF\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 37\n      }\n    }, this.state.totalDate)))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 33\n      }\n    }, \"TOTAL FACE VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 37\n      }\n    }, \"$\", this.convertValues(this.state.totalDenomination))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 33\n      }\n    }, \"TOTAL COST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-price\",\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 37\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalPrice).toFixed(2)))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 33\n      }\n    }, \"TOTAL INTEREST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-interest\",\n      style: {\n        color: '#ff8c00'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 37\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalInterest).toFixed(2)))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 33\n      }\n    }, \"TOTAL VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-value\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 37\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalValue).toFixed(2)))))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        float: 'left',\n        margin: '1em 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      id: \"bond-table\",\n      hidden: this.state.hideTable,\n      onChange: this.state.changeTable,\n      style: {\n        width: '100%',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \".75em\",\n        textTransform: \"uppercase\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 45\n      }\n    }, \"Serial Number\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 45\n      }\n    }, \"Series\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 45\n      }\n    }, \"Denomination\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 45\n      }\n    }, \"Issue Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 45\n      }\n    }, \"Next Accrual\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 45\n      }\n    }, \"Final Maturity\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 45\n      }\n    }, \"Issue Price\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 45\n      }\n    }, \"Interest\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 45\n      }\n    }, \"Value\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 37\n      }\n    }, this.state.bonds.slice(this.state.currentPage * this.state.perPage, (this.state.currentPage + 1) * this.state.perPage).map((bond, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 53\n      }\n    }, bond['serialNumber']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 53\n      }\n    }, bond['series']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 53\n      }\n    }, \"$\", this.convertValues(bond['denomination'])), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 53\n      }\n    }, bond['iDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 53\n      }\n    }, bond['aDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 53\n      }\n    }, bond['mDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 53\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['iPrice']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 53\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['interest']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 53\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['value']).toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleClickX(i),\n      className: \"close\",\n      style: {\n        position: 'absolute',\n        top: '.5em',\n        right: '-1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      style: {\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 61\n      }\n    }, \"\\xD7\"))))))), this.state.bonds.length > this.state.perPage ? /*#__PURE__*/React.createElement(Pagination, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Pagination.Prev, {\n      onClick: this.setPrevPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 41\n      }\n    }), this.state.pages.map(i => /*#__PURE__*/React.createElement(Pagination.Item, {\n      active: i === this.state.currentPage,\n      key: i,\n      onClick: () => this.setCurrentPage(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 45\n      }\n    }, i + 1)), /*#__PURE__*/React.createElement(Pagination.Next, {\n      onClick: this.setNextPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 41\n      }\n    })) : null) : null));\n  }\n\n}\n\nexport default BondPricingOne;","map":{"version":3,"sources":["/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_individual.jsx"],"names":["React","Component","Form","Col","Row","InputGroup","Button","OverlayTrigger","Tooltip","Table","Card","Pagination","CSVLink","BondPricingOne","constructor","props","state","totalPrice","totalInterest","totalValue","totalDenomination","totalDate","month","getCurrentMonth","year","getCurrentYear","showTooltip","visibility","showCards","hideTable","export","exportResults","pages","perPage","currentPage","onUpdateEnter","bind","onUpdateClick","onSubmit","formatDate","appendToTable","setPrevPage","setCurrentPage","setNextPage","exportOnClick","handleClickX","setPages","bonds","pageCount","length","i","push","setState","bondExports","bondExport","parseFloat","toFixed","showCount","value_date","months","split","month_string","d","Date","getMonth","getFullYear","element","parentNode","remove","document","getElementById","getElementsByClassName","currentBond","bondTable","bondBody","getElementsByTagName","createElement","append","style","bondRow","insertRow","className","textAlign","insertCell","innerHTML","cell2","convertValues","cell6","cell7","cell8","position","span","setAttribute","border","button","onclick","right","exportData","e","preventDefault","setTimeout","bondState","bond","getElementsByName","value","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","series_map","target","aMonth","aYear","series","denomination","substring","serialnumber","iMonth","iYear","values","concat","toString","replace","render","width","margin","marginTop","fontSize","marginLeft","top","fontWeight","float","paddingTop","marginBottom","color","changeTable","textTransform","slice","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Col, Row, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card, Pagination } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css'\n\nclass BondPricingOne extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalPrice: 0,\n            totalInterest: 0,\n            totalValue: 0,\n            totalDenomination: 0,\n            totalDate: null,\n            month: this.getCurrentMonth(),\n            year: this.getCurrentYear(),\n            showTooltip: { visibility: 'visible' },\n            showCards: { visibility: 'hidden' },\n            hideTable: true,\n            export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n            exportResults: [],\n            pages: [],\n            perPage: 5,\n            currentPage: 0\n        };\n\n        this.onUpdateEnter = this.onUpdateEnter.bind(this)\n        this.onUpdateClick = this.onUpdateClick.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.formatDate = this.formatDate.bind(this)\n        this.appendToTable = this.appendToTable.bind(this)\n        this.setPrevPage = this.setPrevPage.bind(this)\n        this.setCurrentPage = this.setCurrentPage.bind(this)\n        this.setNextPage = this.setNextPage.bind(this)\n        this.exportOnClick = this.exportOnClick.bind(this)\n        this.handleClickX = this.handleClickX.bind(this)\n    }\n    setPages(bonds) {\n        let pages = []\n        let pageCount = bonds.length / this.state.perPage\n\n        let i = 0\n        while (i < pageCount) {\n            pages.push(i)\n\n            i++\n        }\n\n        this.setState({ pages: pages })\n    }\n\n    exportOnClick() {\n        const bonds = this.state.bonds\n\n        let bondExports = []\n\n        bondExports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value'])\n\n        for (let i = 0; i < bonds.length; i++) {\n\n            let bondExport = [\n                bonds[i]['vDate'],\n                bonds[i]['serialNumber'],\n                bonds[i]['series'],\n                '$' + bonds[i]['denomination'],\n                bonds[i]['iDate'],\n                bonds[i]['aDate'],\n                bonds[i]['mDate'],\n                '$' + parseFloat(bonds[i]['iPrice']).toFixed(2),\n                '$' + parseFloat(bonds[i]['interest']).toFixed(2),\n                '$' + parseFloat(bonds[i]['value']).toFixed(2)\n            ]\n\n            bondExports.push(bondExport);\n        }\n\n        bondExports.push([\n            \"\",\n            \"\",\n            \"\",\n            '$' + this.state.totalDenomination,\n            \"\",\n            \"\",\n            \"\",\n            '$' + parseFloat(this.state.totalPrice).toFixed(2),\n            '$' + parseFloat(this.state.totalInterest).toFixed(2),\n            '$' + parseFloat(this.state.totalValue).toFixed(2)\n        ])\n\n        this.setState({ exportResults: bondExports })\n    }\n\n    setCurrentPage(i) {\n        this.setState({ currentPage: i })\n    }\n\n    setPrevPage() {\n        let showCount = (this.state.currentPage - 1) * this.state.perPage\n        if (showCount >= 0) {\n            this.setState({ currentPage: this.state.currentPage - 1 })\n        }\n    }\n\n\n    setNextPage() {\n        let showCount = (this.state.currentPage + 1) * this.state.perPage\n        if (showCount < this.state.bonds.length) {\n            this.setState({ currentPage: this.state.currentPage + 1 })\n        }\n    }\n\n\n    formatDate(value_date) {\n        const months = { \"01\": \"Jan.\", \"02\": \"Feb.\", \"03\": \"March\", \"04\": \"April\", \"05\": \"May\", \"06\": \"June\", \"07\": \"July\", \"08\": \"Aug.\", \"09\": \"Sept\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\" }\n\n        let month = value_date.split('/')[0]\n        let year = value_date.split('/')[1]\n\n        let month_string = months[month] + ' 1, ' + year\n\n        return month_string\n    }\n\n    getCurrentMonth() {\n        let d = new Date();\n        return d.getMonth() + 1\n    }\n\n    getCurrentYear() {\n        let d = new Date();\n\n        return d.getFullYear()\n    }\n\n    handleClickX(element) {\n        element.parentNode.parentNode.remove()\n\n        if ((document.getElementById('bond-table').getElementsByClassName('bond-row')).length > 0) {\n            this.onUpdateClick();\n        }\n        else {\n            this.setState({ totalPrice: 0, totalInterest: 0, totalValue: 0, totalDenomination: 0 })\n        }\n    }\n\n    appendToTable(currentBond) {\n        const bondTable = document.getElementById('bond-table')\n\n        let bondBody = null\n\n        if (bondTable.getElementsByTagName('tbody').length === 0) {\n            bondBody = document.createElement('tbody')\n            bondTable.append(bondBody)\n        }\n        else {\n            bondBody = bondTable.getElementsByTagName('tbody')[0]\n        }\n\n        if (currentBond['interest'] < 0) {\n            currentBond['interest'] = 0\n        }\n\n        bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible'\n\n        let bondRow = bondBody.insertRow();\n        bondRow.className = \"bond-row\"\n        bondRow.style.textAlign = 'center'\n\n        bondRow.insertCell(0).innerHTML = currentBond['serialNumber']\n        bondRow.insertCell(1).innerHTML = currentBond['series']\n\n        let cell2 = bondRow.insertCell(2)\n        cell2.className = 'bond-denomination'\n        cell2.innerHTML = '$' + this.convertValues(currentBond['denomination'])\n\n        bondRow.insertCell(3).innerHTML = currentBond['iDate']\n        bondRow.insertCell(4).innerHTML = currentBond['aDate']\n        bondRow.insertCell(5).innerHTML = currentBond['mDate']\n\n        let cell6 = bondRow.insertCell(6)\n        cell6.className = 'bond-price'\n        cell6.innerHTML = '$' + this.convertValues(parseFloat(currentBond['iPrice']).toFixed(2))\n\n        let cell7 = bondRow.insertCell(7)\n        cell7.className = 'bond-interest'\n        cell7.innerHTML = '$' + this.convertValues(parseFloat(currentBond['interest']).toFixed(2))\n\n        let cell8 = bondRow.insertCell(8)\n        cell8.className = 'bond-value'\n        cell8.innerHTML = '$' + this.convertValues(parseFloat(currentBond['value']).toFixed(2))\n        cell8.style.position = 'relative'\n\n        let span = document.createElement('span')\n        span.innerHTML = '&times;'\n        span.setAttribute('aria-hidden', 'true')\n        span.style.border = 'none';\n\n        let button = document.createElement('button')\n        button.onclick = () => { this.handleClickX(button) };\n        button.className = 'close'\n        button.style.position = 'absolute'\n        button.style.right = '-1em'\n\n        button.append(span);\n        cell8.append(button);\n\n        this.exportData()\n    }\n\n    onUpdateEnter(e) {\n        e.preventDefault();\n\n        setTimeout(() => {\n            this.setState({ showTooltip: { visibility: 'hidden' } })\n        }, 3500)\n    }\n\n    onUpdateClick() {\n        const bondState = this.state.bonds\n\n        let bonds = []\n\n        for (let i = 0; i < bondState.length; i++) {\n            let bond = {\n                'vMonth': document.getElementsByName('aMonth')[0].value,\n                'vYear': document.getElementsByName('aYear')[0].value,\n                'series': this.state.bonds[i]['series'],\n                'denomination': this.state.bonds[i]['denomination'],\n                'serialNumber': this.state.bonds[i]['serialNumber'],\n                'iDate': this.state.bonds[i]['iDate']\n            }\n\n            bonds.push(bond)\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n\n                this.setState({\n                    totalDate: this.formatDate(response[1]['totalDate']),\n                    totalDenomination: response[1]['totalDenominations'],\n                    totalPrice: response[1]['totalPrices'],\n                    totalInterest: response[1]['totalInterests'],\n                    totalValue: response[1]['totalValues']\n                })\n\n                this.setState({ bonds: response[0] })\n            })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.hideTable) {\n            this.setState({ hideTable: false, showCards: { visibility: 'visible' } })\n        }\n\n        const series_map = {\n            'EE Bond': 'EE',\n            'E Bond': 'E',\n            'I Bond': 'I',\n            'Savings Bond': 'S'\n        }\n\n        let bond = {\n            'vMonth': e.target.aMonth.value,\n            'vYear': e.target.aYear.value,\n            'series': series_map[e.target.series.value],\n            'denomination': (e.target.denomination.value).substring(1),\n            'serialNumber': e.target.serialnumber.value,\n            'iMonth': e.target.iMonth.value,\n            'iYear': e.target.iYear.value\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bond })\n        };\n\n        fetch('http://localhost:5000/individual/bonds', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                this.appendToTable(response)\n\n                this.setState({ currentBond: response })\n\n                let values = [\n                    response['vDate'],\n                    response['serialNumber'],\n                    response['series'],\n                    '$' + response['denomination'],\n                    response['iDate'],\n                    response['aDate'],\n                    response['mDate'],\n                    '$' + response['iPrice'],\n                    '$' + response['interest'],\n                    '$' + response['value']\n                ]\n\n                this.setState({\n                    totalDate: this.formatDate(response['vDate']),\n                    totalDenomination: this.state.totalDenomination + parseFloat(response['denomination']),\n                    totalPrice: this.state.totalPrice + parseFloat(response['iPrice']),\n                    totalInterest: this.state.totalInterest + parseFloat(response['interest']),\n                    totalValue: this.state.totalValue + parseFloat(response['value'])\n                })\n\n                this.setState({ export: this.state.export.concat(\",\" + values.toString()) })\n\n                this.exportData()\n            })\n    }\n\n    convertValues(value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    }\n\n    render() {\n        return (\n            <div style={{ width: '70%', margin: 'auto', marginTop: '1.5em' }}>\n                <Form onSubmit={this.onSubmit} style={{ width: '100%', fontSize: '14px' }}>\n                    <Form.Row>\n                        <Col className=\"col-padding\" style={{ position: 'relative' }}>\n                            <Form.Label>VALUE AS OF</Form.Label>\n                            <InputGroup>\n                                <Form.Control\n                                    required\n                                    name=\"aMonth\"\n                                    type=\"number\"\n                                    placeholder=\"Month\"\n                                    min=\"1\"\n                                    max=\"12\"\n                                    defaultValue={this.state.month}\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                </InputGroup.Append>\n                                <Form.Control\n                                    required\n                                    name=\"aYear\"\n                                    type=\"number\"\n                                    placeholder=\"Year\"\n                                    maxLength=\"4\"\n                                    min=\"1992\"\n                                    max={this.state.year}\n                                    style={{ marginLeft: '-1px' }}\n                                    defaultValue={this.state.year}\n                                />\n                            </InputGroup>\n                            <OverlayTrigger placement='right' overlay={\n                                <Tooltip style={this.state.showTooltip} >\n                                    Revalue all bonds by this date.\n                                    </Tooltip>}>\n                                <Button type=\"button\" size='sm' variant='success' onMouseEnter={this.onUpdateEnter} onClick={this.onUpdateClick} style={{ position: 'absolute', top: '0', right: '1.5em', fontSize: '.65em', fontWeight: 'bold' }}>UPDATE</Button>\n                            </OverlayTrigger>\n                        </Col>\n                        <Col className=\"col-padding\">\n                            <Form.Label>SERIES</Form.Label>\n                            <Form.Control name=\"series\" as=\"select\" custom>\n                                <option>EE Bond</option>\n                                <option>I Bond</option>\n                                <option>E Bond</option>\n                                <option>Savings Note</option>\n                            </Form.Control>\n                        </Col>\n                        <Col className=\"col-padding\">\n                            <Form.Label>DENOMINATION</Form.Label>\n                            <Form.Control name=\"denomination\" as=\"select\" custom>\n                                <option>$25</option>\n                                <option>$50</option>\n                                <option>$75</option>\n                                <option>$100</option>\n                                <option>$200</option>\n                                <option>$500</option>\n                                <option>$1,000</option>\n                                <option>$5,000</option>\n                                <option>$10,000</option>\n                            </Form.Control>\n                        </Col>\n                        <Col className=\"col-padding\">\n                            <Form.Label size='sm'>SERIAL NUMBER</Form.Label>\n                            <Form.Control\n                                name=\"serialnumber\"\n                                type=\"text\"\n                                placeholder=\"Optional\"\n                            />\n                        </Col>\n                        <Col style={{ position: 'relative' }}>\n                            <Form.Label>ISSUE DATE</Form.Label>\n                            <InputGroup>\n                                <Form.Control\n                                    required\n                                    name=\"iMonth\"\n                                    type=\"number\"\n                                    placeholder=\"Month\"\n                                    maxLength=\"2\"\n                                    min=\"1\"\n                                    max=\"12\"\n                                    defaultValue=\"11\"\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                </InputGroup.Append>\n                                <Form.Control\n                                    required\n                                    name=\"iYear\"\n                                    type=\"number\"\n                                    placeholder=\"Year\"\n                                    maxLength=\"4\"\n                                    min=\"1940\"\n                                    max={this.state.year}\n                                    style={{ marginLeft: '-1px' }}\n                                    defaultValue=\"2005\"\n                                />\n                            </InputGroup>\n                            <Button type=\"submit\" size='sm' style={{ position: 'absolute', top: '0', right: '.5em', fontSize: '.65em', fontWeight: 'bold' }}>SUBMIT</Button>\n                        </Col>\n                    </Form.Row>\n                </Form >\n                <div id=\"card-container\" style={{ width: '100%', float: 'left', paddingTop: '1em' }}>\n                    {this.state.bonds.length > 0 ? <div onClick={this.exportOnClick} style={{ width: '100%', textAlign: 'right', marginBottom: '.25em' }}>\n                        <CSVLink filename={'bonds_valued_from_' + this.state.month + '_' + this.state.year} data={this.state.exportResults.length > 0 ? this.state.exportResults : ''}>+ [Export]</CSVLink>\n                    </div> : null}\n                    <Row>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>VALUED AS OF</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title>{this.state.totalDate}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL FACE VALUE</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title>${this.convertValues(this.state.totalDenomination)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL COST</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-price\" style={{ color: 'red' }}>${this.convertValues(parseFloat(this.state.totalPrice).toFixed(2))}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL INTEREST</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-interest\" style={{ color: '#ff8c00' }}>${this.convertValues(parseFloat(this.state.totalInterest).toFixed(2))}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL VALUE</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-value\" style={{ color: 'green' }}>${this.convertValues(parseFloat(this.state.totalValue).toFixed(2))}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div >\n                <div style={{ width: '100%', float: 'left', margin: '1em 0' }}>\n                    {\n                        this.state.bonds.length > 0 ?\n                            <div>\n                                <Table striped bordered hover id=\"bond-table\" hidden={this.state.hideTable} onChange={this.state.changeTable} style={{ width: '100%', margin: 'auto' }}>\n                                    <thead style={{ textAlign: \"center\", fontSize: \".75em\", textTransform: \"uppercase\" }}>\n                                        <tr>\n                                            <th>Serial Number</th>\n                                            <th>Series</th>\n                                            <th>Denomination</th>\n                                            <th>Issue Date</th>\n                                            <th>Next Accrual</th>\n                                            <th>Final Maturity</th>\n                                            <th>Issue Price</th>\n                                            <th>Interest</th>\n                                            <th>Value</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.bonds\n                                            .slice(this.state.currentPage * this.state.perPage, (this.state.currentPage + 1) * this.state.perPage)\n                                            .map((bond, i) => (\n                                                <tr key={i}>\n                                                    <td>{bond['serialNumber']}</td>\n                                                    <td>{bond['series']}</td>\n                                                    <td>${this.convertValues(bond['denomination'])}</td>\n                                                    <td>{bond['iDate']}</td>\n                                                    <td>{bond['aDate']}</td>\n                                                    <td>{bond['mDate']}</td>\n                                                    <td>${this.convertValues(parseFloat(bond['iPrice']).toFixed(2))}</td>\n                                                    <td>${this.convertValues(parseFloat(bond['interest']).toFixed(2))}</td>\n                                                    <td style={{ position: 'relative' }}>\n                                                        ${this.convertValues(parseFloat(bond['value']).toFixed(2))}\n                                                        <button onClick={() => this.handleClickX(i)} className='close' style={{ position: 'absolute', top: '.5em', right: '-1em' }}>\n                                                            <span aria-hidden='true' style={{ border: 'none' }}>&times;</span>\n                                                        </button>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                    </tbody>\n                                </Table>\n                                {this.state.bonds.length > this.state.perPage ?\n                                    <Pagination size='sm'>\n                                        <Pagination.Prev onClick={this.setPrevPage} />\n                                        {this.state.pages.map((i) => (\n                                            <Pagination.Item active={i === this.state.currentPage} key={i} onClick={() => this.setCurrentPage(i)}>{i + 1}</Pagination.Item>\n                                        ))}\n                                        <Pagination.Next onClick={this.setNextPage} />\n                                    </Pagination>\n                                    : null}\n                            </div>\n                            : null}\n\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BondPricingOne;\n\n"]},"metadata":{},"sourceType":"module"}