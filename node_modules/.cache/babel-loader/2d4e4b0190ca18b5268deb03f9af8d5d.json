{"ast":null,"code":"var _jsxFileName = \"/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_spreadsheet.jsx\";\nimport React, { Component } from 'react';\nimport { Form, Col, Row, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css';\n\nclass BondPricingTwo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bonds: [],\n      filename: 'Attach .csv',\n      totalPrice: 0,\n      totalInterest: 0,\n      totalValue: 0,\n      totalDenomination: 0,\n      totalDate: null,\n      month: this.getCurrentMonth(),\n      year: this.getCurrentYear(),\n      showTooltip: {\n        visibility: 'visible'\n      },\n      showCards: {\n        visibility: 'hidden'\n      },\n      hideTable: true,\n      export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n      exportResults: []\n    };\n    this.onUpdateEnter = this.onUpdateEnter.bind(this);\n    this.onUpdateClick = this.onUpdateClick.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.appendToTable = this.appendToTable.bind(this);\n    this.exportData = this.exportData.bind(this);\n    this.setFilename = this.setFilename.bind(this);\n  }\n\n  setFilename(e) {\n    if (e.target.files.length > 0) {//this.setState({ filename: e.target.files[0].name })\n    }\n  }\n\n  formatDate(value_date) {\n    const months = {\n      \"01\": \"Jan.\",\n      \"02\": \"Feb.\",\n      \"03\": \"March\",\n      \"04\": \"April\",\n      \"05\": \"May\",\n      \"06\": \"June\",\n      \"07\": \"July\",\n      \"08\": \"Aug.\",\n      \"09\": \"Sept\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    let month = value_date.split('/')[0];\n    let year = value_date.split('/')[1];\n    let month_string = months[month] + ' 1, ' + year;\n    return month_string;\n  }\n\n  getCurrentMonth() {\n    let d = new Date();\n    return d.getMonth() + 1;\n  }\n\n  getCurrentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  handleClickX(element) {\n    element.parentNode.parentNode.remove();\n\n    if (document.getElementById('bond-table').getElementsByClassName('bond-row').length > 0) {\n      this.onUpdateClick();\n    } else {\n      this.setState({\n        totalPrice: 0,\n        totalInterest: 0,\n        totalValue: 0,\n        totalDenomination: 0\n      });\n    }\n  }\n\n  appendToTable(currentBond) {\n    const bondTable = document.getElementById('bond-table');\n    let bondBody = null;\n\n    if (bondTable.getElementsByTagName('tbody').length === 0) {\n      bondBody = document.createElement('tbody');\n      bondTable.append(bondBody);\n    } else {\n      bondBody = bondTable.getElementsByTagName('tbody')[0];\n    }\n\n    if (currentBond['interest'] < 0) {\n      currentBond['interest'] = 0;\n    }\n\n    bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible';\n    let bondRow = bondBody.insertRow();\n    bondRow.className = \"bond-row\";\n    bondRow.style.textAlign = 'center';\n    bondRow.insertCell(0).innerHTML = currentBond['serialNumber'];\n    bondRow.insertCell(1).innerHTML = currentBond['series'];\n    let cell2 = bondRow.insertCell(2);\n    cell2.className = 'bond-denomination';\n    cell2.innerHTML = '$' + currentBond['denomination'];\n    bondRow.insertCell(3).innerHTML = currentBond['iDate'];\n    bondRow.insertCell(4).innerHTML = currentBond['aDate'];\n    bondRow.insertCell(5).innerHTML = currentBond['mDate'];\n    let cell6 = bondRow.insertCell(6);\n    cell6.className = 'bond-price';\n    cell6.innerHTML = '$' + parseFloat(currentBond['iPrice']).toFixed(2);\n    let cell7 = bondRow.insertCell(7);\n    cell7.className = 'bond-interest';\n    cell7.innerHTML = '$' + parseFloat(currentBond['interest']).toFixed(2);\n    let cell8 = bondRow.insertCell(8);\n    cell8.className = 'bond-value';\n    cell8.innerHTML = '$' + parseFloat(currentBond['value']).toFixed(2);\n    cell8.style.position = 'relative';\n    let span = document.createElement('span');\n    span.innerHTML = '&times;';\n    span.setAttribute('aria-hidden', 'true');\n    span.style.border = 'none';\n    let button = document.createElement('button');\n\n    button.onclick = () => {\n      this.handleClickX(button);\n    };\n\n    button.className = 'close';\n    button.style.position = 'absolute';\n    button.style.right = '-1em';\n    button.append(span);\n    cell8.append(button);\n    this.exportData();\n  }\n\n  onUpdateEnter(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      this.setState({\n        showTooltip: {\n          visibility: 'hidden'\n        }\n      });\n    }, 3500);\n  }\n\n  onUpdateClick() {\n    let rows = document.getElementById('bond-table').getElementsByTagName('tr');\n    let bonds = [];\n    let vMonth = document.getElementsByName('aMonth')[0].value;\n    let vYear = document.getElementsByName('aYear')[0].value;\n\n    for (let i = 1; i < rows.length; i++) {\n      let series = rows[i].getElementsByTagName('td')[1].innerHTML;\n      let denomination = rows[i].getElementsByTagName('td')[2].innerHTML.substring(1);\n      let serialNumber = rows[i].getElementsByTagName('td')[0].innerHTML;\n      let iMonth = parseInt(rows[i].getElementsByTagName('td')[3].innerHTML.split('/')[0]);\n      let iYear = rows[i].getElementsByTagName('td')[3].innerHTML.split('/')[1];\n      let bond = {\n        'vMonth': vMonth,\n        'vYear': vYear,\n        'series': series,\n        'denomination': denomination,\n        'serialNumber': serialNumber,\n        'iMonth': iMonth.toString(),\n        'iYear': iYear\n      };\n      bonds.push(bond);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      let bondRows = document.getElementById('bond-table').getElementsByTagName('tbody')[0];\n      bondRows.remove();\n      let exports = [[\"Value as of\", \"Serial #\", \"Series\", \"Denomination\", \"Issue Date\", \"Next Accrual\", \"Final Maturity\", \"Issue Price\", \"Interest\", \"Value\"]];\n\n      for (let i = 0; i < response[0].length; i++) {\n        this.appendToTable(response[0][i]);\n        exports.push([response[0][i]['vDate'], response[0][i]['serialNumber'], response[0][i]['series'], '$' + response[0][i]['denomination'], response[0][i]['iDate'], '$' + response[0][i]['iPrice'], response[0][i]['aDate'], response[0][i]['mDate'], '$' + response[0][i]['value'], '$' + response[0][i]['interest']]);\n      }\n\n      exports.push([\"\", \"\", \"\", '$' + response[1]['totalDenominations'], \"\", \"\", \"\", '$' + parseFloat(response[1]['totalPrices']).toFixed(2), '$' + parseFloat(response[1]['totalInterests']).toFixed(2), '$' + parseFloat(response[1]['totalValues']).toFixed(2)]);\n      this.setState({\n        totalDate: this.formatDate(response[1]['totalDate']),\n        totalDenomination: response[1]['totalDenominations'],\n        totalPrice: response[1]['totalPrices'],\n        totalInterest: response[1]['totalInterests'],\n        totalValue: response[1]['totalValues']\n      });\n      this.setState({\n        exportResults: exports\n      });\n    });\n  }\n\n  exportData() {\n    let exports = this.state.export.split(',');\n    let export_data = [];\n    let i = 0;\n\n    while (i + 10 <= exports.length) {\n      export_data.push(exports.slice(i, i + 10));\n      i += 10;\n    }\n\n    export_data.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)]);\n    this.setState({\n      exportResults: export_data\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    /*if (this.state.hideTable) {\n        this.setState({ hideTable: false, showCards: { visibility: 'visible' } })\n    }*/\n\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      const csv = reader.result;\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n          csv\n        })\n      };\n      fetch('http://localhost:5000/upload', requestOptions).then(response => response.json()).then(response => {\n        let exports = [];\n        exports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Interest Rate', 'Bond Value']);\n\n        for (let i = 0; i < response[0].length; i++) {\n          let values = [response['vDate'], response['serialNumber'], response['series'], '$' + response['denomination'], response['iDate'], response['aDate'], response['mDate'], '$' + response['iPrice'], '$' + response['interest'], '$' + response['value']];\n          exports.push(values);\n        }\n\n        this.setState({\n          totalDate: this.formatDate(response[1]['totalDate']),\n          totalDenomination: response[1]['totalDenominations'],\n          totalPrice: response[1]['totalPrices'],\n          totalInterest: response[1]['totalInterests'],\n          totalValue: response[1]['totalValues']\n        });\n        exports.push([\"\", \"\", \"\", '$' + response[1]['totalDenominations'], \"\", \"\", \"\", '$' + parseFloat(response[1]['totalPrices']).toFixed(2), '$' + parseFloat(response[1]['totalInterests']).toFixed(2), '$' + parseFloat(response[1]['totalValues']).toFixed(2)]);\n        this.setState({\n          bonds: response[0],\n          exportResults: exports\n        });\n      });\n    };\n\n    reader.readAsText(e.target.files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '70%',\n        margin: 'auto',\n        marginTop: '1.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      className: \"form-csv\",\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.File, {\n      id: \"custom-file\",\n      label: this.state.label,\n      onChange: this.setFilename,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"card-container\",\n      style: {\n        width: '100%',\n        float: 'left',\n        paddingTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }\n    }, this.state.exportResults.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        textAlign: 'right',\n        marginBottom: '.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 60\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: 'bonds_valued_from_' + this.state.month + '_' + this.state.year,\n      data: this.state.exportResults.length > 0 ? this.state.exportResults : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 25\n      }\n    }, \"+ [Export]\")) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 33\n      }\n    }, \"VALUED AS OF\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 37\n      }\n    }, this.state.totalDate)))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 33\n      }\n    }, \"TOTAL FACE VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 37\n      }\n    }, \"$\", this.state.totalDenomination)))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 33\n      }\n    }, \"TOTAL COST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-price\",\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 37\n      }\n    }, \"$\", parseFloat(this.state.totalPrice).toFixed(2))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 33\n      }\n    }, \"TOTAL INTEREST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-interest\",\n      style: {\n        color: '#ff8c00'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 37\n      }\n    }, \"$\", parseFloat(this.state.totalInterest).toFixed(2))))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      style: this.state.showCards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 33\n      }\n    }, \"TOTAL VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-value\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 37\n      }\n    }, \"$\", parseFloat(this.state.totalValue).toFixed(2))))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        float: 'left',\n        marginTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      id: \"bond-table\",\n      hidden: this.state.hideTable,\n      onChange: this.state.changeTable,\n      style: {\n        width: '100%',\n        margin: 'auto',\n        marginBottom: '2em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \".75em\",\n        textTransform: \"uppercase\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 41\n      }\n    }, \"Serial Number\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 41\n      }\n    }, \"Bond Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 41\n      }\n    }, \"Bond Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 41\n      }\n    }, \"Issue Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 41\n      }\n    }, \"Next Accrual\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 41\n      }\n    }, \"Final Maturity\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 41\n      }\n    }, \"Issue Price\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 41\n      }\n    }, \"Interest\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 41\n      }\n    }, \"Interest Rate\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 41\n      }\n    }, \"Value\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 33\n      }\n    }, this.state.bonds.map(bond => /*#__PURE__*/React.createElement(\"tr\", {\n      key: bond[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 45\n      }\n    }, bond[0]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 45\n      }\n    }, bond[1]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 45\n      }\n    }, bond[2]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 45\n      }\n    }, bond[3]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 45\n      }\n    }, bond[4]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 45\n      }\n    }, bond[5]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 45\n      }\n    }, bond[6]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 45\n      }\n    }, bond[7]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 45\n      }\n    }, bond[8]), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 45\n      }\n    }, bond[9]))))) : null));\n  }\n\n}\n\nexport default BondPricingTwo;","map":{"version":3,"sources":["/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_spreadsheet.jsx"],"names":["React","Component","Form","Col","Row","InputGroup","Button","OverlayTrigger","Tooltip","Table","Card","CSVLink","BondPricingTwo","constructor","props","state","bonds","filename","totalPrice","totalInterest","totalValue","totalDenomination","totalDate","month","getCurrentMonth","year","getCurrentYear","showTooltip","visibility","showCards","hideTable","export","exportResults","onUpdateEnter","bind","onUpdateClick","onSubmit","formatDate","appendToTable","exportData","setFilename","e","target","files","length","value_date","months","split","month_string","d","Date","getMonth","getFullYear","handleClickX","element","parentNode","remove","document","getElementById","getElementsByClassName","setState","currentBond","bondTable","bondBody","getElementsByTagName","createElement","append","style","bondRow","insertRow","className","textAlign","insertCell","innerHTML","cell2","cell6","parseFloat","toFixed","cell7","cell8","position","span","setAttribute","border","button","onclick","right","preventDefault","setTimeout","rows","vMonth","getElementsByName","value","vYear","i","series","denomination","substring","serialNumber","iMonth","parseInt","iYear","bond","toString","push","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","bondRows","exports","export_data","slice","reader","FileReader","onload","csv","result","values","readAsText","render","width","margin","marginTop","label","float","paddingTop","marginBottom","color","changeTable","fontSize","textTransform","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Col, Row, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css'\n\nclass BondPricingTwo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bonds: [],\n            filename: 'Attach .csv',\n            totalPrice: 0,\n            totalInterest: 0,\n            totalValue: 0,\n            totalDenomination: 0,\n            totalDate: null,\n            month: this.getCurrentMonth(),\n            year: this.getCurrentYear(),\n            showTooltip: { visibility: 'visible' },\n            showCards: { visibility: 'hidden' },\n            hideTable: true,\n            export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n            exportResults: []\n        };\n\n        this.onUpdateEnter = this.onUpdateEnter.bind(this)\n        this.onUpdateClick = this.onUpdateClick.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.formatDate = this.formatDate.bind(this)\n        this.appendToTable = this.appendToTable.bind(this)\n        this.exportData = this.exportData.bind(this)\n        this.setFilename = this.setFilename.bind(this)\n    }\n\n    setFilename(e) {\n        if (e.target.files.length > 0) {\n            //this.setState({ filename: e.target.files[0].name })\n        }\n    }\n\n    formatDate(value_date) {\n        const months = { \"01\": \"Jan.\", \"02\": \"Feb.\", \"03\": \"March\", \"04\": \"April\", \"05\": \"May\", \"06\": \"June\", \"07\": \"July\", \"08\": \"Aug.\", \"09\": \"Sept\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\" }\n\n        let month = value_date.split('/')[0]\n        let year = value_date.split('/')[1]\n\n        let month_string = months[month] + ' 1, ' + year\n\n        return month_string\n    }\n\n    getCurrentMonth() {\n        let d = new Date();\n        return d.getMonth() + 1\n    }\n\n    getCurrentYear() {\n        let d = new Date();\n\n        return d.getFullYear()\n    }\n\n    handleClickX(element) {\n        element.parentNode.parentNode.remove()\n\n        if ((document.getElementById('bond-table').getElementsByClassName('bond-row')).length > 0) {\n            this.onUpdateClick();\n        }\n        else {\n            this.setState({ totalPrice: 0, totalInterest: 0, totalValue: 0, totalDenomination: 0 })\n        }\n    }\n\n    appendToTable(currentBond) {\n        const bondTable = document.getElementById('bond-table')\n\n        let bondBody = null\n\n        if (bondTable.getElementsByTagName('tbody').length === 0) {\n            bondBody = document.createElement('tbody')\n            bondTable.append(bondBody)\n        }\n        else {\n            bondBody = bondTable.getElementsByTagName('tbody')[0]\n        }\n\n        if (currentBond['interest'] < 0) {\n            currentBond['interest'] = 0\n        }\n\n        bondTable.getElementsByTagName('tr')[0].style.visibility = 'visible'\n\n        let bondRow = bondBody.insertRow();\n        bondRow.className = \"bond-row\"\n        bondRow.style.textAlign = 'center'\n\n        bondRow.insertCell(0).innerHTML = currentBond['serialNumber']\n        bondRow.insertCell(1).innerHTML = currentBond['series']\n\n        let cell2 = bondRow.insertCell(2)\n        cell2.className = 'bond-denomination'\n        cell2.innerHTML = '$' + currentBond['denomination']\n\n        bondRow.insertCell(3).innerHTML = currentBond['iDate']\n        bondRow.insertCell(4).innerHTML = currentBond['aDate']\n        bondRow.insertCell(5).innerHTML = currentBond['mDate']\n\n        let cell6 = bondRow.insertCell(6)\n        cell6.className = 'bond-price'\n        cell6.innerHTML = '$' + parseFloat(currentBond['iPrice']).toFixed(2)\n\n        let cell7 = bondRow.insertCell(7)\n        cell7.className = 'bond-interest'\n        cell7.innerHTML = '$' + parseFloat(currentBond['interest']).toFixed(2)\n\n        let cell8 = bondRow.insertCell(8)\n        cell8.className = 'bond-value'\n        cell8.innerHTML = '$' + parseFloat(currentBond['value']).toFixed(2)\n        cell8.style.position = 'relative'\n\n        let span = document.createElement('span')\n        span.innerHTML = '&times;'\n        span.setAttribute('aria-hidden', 'true')\n        span.style.border = 'none';\n\n        let button = document.createElement('button')\n        button.onclick = () => { this.handleClickX(button) };\n        button.className = 'close'\n        button.style.position = 'absolute'\n        button.style.right = '-1em'\n\n        button.append(span);\n        cell8.append(button);\n\n        this.exportData()\n    }\n\n    onUpdateEnter(e) {\n        e.preventDefault();\n\n        setTimeout(() => {\n            this.setState({ showTooltip: { visibility: 'hidden' } })\n        }, 3500)\n    }\n\n    onUpdateClick() {\n        let rows = document.getElementById('bond-table').getElementsByTagName('tr')\n\n        let bonds = []\n\n        let vMonth = document.getElementsByName('aMonth')[0].value\n        let vYear = document.getElementsByName('aYear')[0].value\n\n        for (let i = 1; i < rows.length; i++) {\n            let series = rows[i].getElementsByTagName('td')[1].innerHTML\n            let denomination = (rows[i].getElementsByTagName('td')[2].innerHTML).substring(1)\n            let serialNumber = rows[i].getElementsByTagName('td')[0].innerHTML\n            let iMonth = parseInt((rows[i].getElementsByTagName('td')[3].innerHTML).split('/')[0])\n            let iYear = (rows[i].getElementsByTagName('td')[3].innerHTML).split('/')[1]\n\n            let bond = {\n                'vMonth': vMonth,\n                'vYear': vYear,\n                'series': series,\n                'denomination': denomination,\n                'serialNumber': serialNumber,\n                'iMonth': iMonth.toString(),\n                'iYear': iYear,\n            }\n\n            bonds.push(bond)\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                let bondRows = document.getElementById('bond-table').getElementsByTagName('tbody')[0]\n                bondRows.remove()\n\n                let exports = [[\"Value as of\", \"Serial #\", \"Series\", \"Denomination\", \"Issue Date\", \"Next Accrual\", \"Final Maturity\", \"Issue Price\", \"Interest\", \"Value\"]]\n\n                for (let i = 0; i < response[0].length; i++) {\n                    this.appendToTable(response[0][i])\n\n                    exports.push([\n                        response[0][i]['vDate'],\n                        response[0][i]['serialNumber'],\n                        response[0][i]['series'],\n                        '$' + response[0][i]['denomination'],\n                        response[0][i]['iDate'],\n                        '$' + response[0][i]['iPrice'],\n                        response[0][i]['aDate'],\n                        response[0][i]['mDate'],\n                        '$' + response[0][i]['value'],\n                        '$' + response[0][i]['interest']\n                    ])\n                }\n\n                exports.push([\n                    \"\",\n                    \"\",\n                    \"\",\n                    '$' + response[1]['totalDenominations'],\n                    \"\",\n                    \"\",\n                    \"\",\n                    '$' + parseFloat(response[1]['totalPrices']).toFixed(2),\n                    '$' + parseFloat(response[1]['totalInterests']).toFixed(2),\n                    '$' + parseFloat(response[1]['totalValues']).toFixed(2)\n                ])\n\n                this.setState({\n                    totalDate: this.formatDate(response[1]['totalDate']),\n                    totalDenomination: response[1]['totalDenominations'],\n                    totalPrice: response[1]['totalPrices'],\n                    totalInterest: response[1]['totalInterests'],\n                    totalValue: response[1]['totalValues']\n                })\n\n                this.setState({ exportResults: exports })\n            })\n    }\n\n    exportData() {\n        let exports = (this.state.export).split(',')\n\n        let export_data = []\n\n        let i = 0\n        while ((i + 10) <= exports.length) {\n            export_data.push(exports.slice(i, i + 10))\n            i += 10\n        }\n\n        export_data.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)])\n\n        this.setState({ exportResults: export_data })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        /*if (this.state.hideTable) {\n            this.setState({ hideTable: false, showCards: { visibility: 'visible' } })\n        }*/\n\n        var reader = new FileReader();\n\n        reader.onload = () => {\n            const csv = reader.result\n\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n                body: JSON.stringify({ csv })\n            };\n\n            fetch('http://localhost:5000/upload', requestOptions)\n                .then(response => response.json())\n                .then(response => {\n                    let exports = []\n\n                    exports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Interest Rate', 'Bond Value'])\n\n                    for (let i = 0; i < response[0].length; i++) {\n                        let values = [\n                            response['vDate'],\n                            response['serialNumber'],\n                            response['series'],\n                            '$' + response['denomination'],\n                            response['iDate'],\n                            response['aDate'],\n                            response['mDate'],\n                            '$' + response['iPrice'],\n                            '$' + response['interest'],\n                            '$' + response['value']\n                        ]\n\n                        exports.push(values);\n                    }\n\n                    this.setState({\n                        totalDate: this.formatDate(response[1]['totalDate']),\n                        totalDenomination: response[1]['totalDenominations'],\n                        totalPrice: response[1]['totalPrices'],\n                        totalInterest: response[1]['totalInterests'],\n                        totalValue: response[1]['totalValues']\n                    })\n\n                    exports.push([\n                        \"\",\n                        \"\",\n                        \"\",\n                        '$' + response[1]['totalDenominations'],\n                        \"\",\n                        \"\",\n                        \"\",\n                        '$' + parseFloat(response[1]['totalPrices']).toFixed(2),\n                        '$' + parseFloat(response[1]['totalInterests']).toFixed(2),\n                        '$' + parseFloat(response[1]['totalValues']).toFixed(2)\n                    ])\n\n                    this.setState({ bonds: response[0], exportResults: exports })\n                })\n        }\n\n        reader.readAsText(e.target.files[0]);\n    }\n\n    render() {\n        return (\n            <div style={{ width: '70%', margin: 'auto', marginTop: '1.5em' }}>\n                {/*{this.onSubmit} style={{ width: '100%', fontSize: '14px' }}>\n                    <Form.Row>\n                    <Col style={{ position: 'relative' }}>\n                        <Form.Label>VALUE AS OF</Form.Label>\n                        <InputGroup>\n                            <Form.Control\n                                required\n                                name=\"aMonth\"\n                                type=\"number\"\n                                placeholder=\"Month\"\n                                min=\"1\"\n                                max=\"12\"\n                                defaultValue={this.state.month}\n                            />\n                            <InputGroup.Append>\n                                <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                            </InputGroup.Append>\n                            <Form.Control\n                                required\n                                name=\"aYear\"\n                                type=\"number\"\n                                placeholder=\"Year\"\n                                maxLength=\"4\"\n                                min=\"1992\"\n                                max={this.state.year}\n                                style={{ marginLeft: '-1px' }}\n                                defaultValue={this.state.year}\n                            />\n                        </InputGroup>\n                        <OverlayTrigger placement='right' overlay={\n                            <Tooltip style={this.state.showTooltip} >\n                                Revalue all bonds by this date.\n                                    </Tooltip>}>\n                            <Button type=\"button\" size='sm' variant='success' onMouseEnter={this.onUpdateEnter} onClick={this.onUpdateClick} style={{ position: 'absolute', top: '0', right: '1.5em', fontSize: '.65em', fontWeight: 'bold' }}>UPDATE</Button>\n                        </OverlayTrigger>\n                    </Col>\n                    <Col>\n                     \n                    </Col>\n                </Form.Row>\n                        </Form>*/}\n                <Form className=\"form-csv\" style={{ position: 'relative' }}>\n                    <Form.File\n                        id=\"custom-file\"\n                        label={this.state.label}\n                        onChange={this.setFilename}\n                        custom\n                    />\n                </Form>\n                <div id=\"card-container\" style={{ width: '100%', float: 'left', paddingTop: '1em' }}>\n                    {this.state.exportResults.length > 0 ? <div style={{ width: '100%', textAlign: 'right', marginBottom: '.25em' }}>\n                        <CSVLink filename={'bonds_valued_from_' + this.state.month + '_' + this.state.year} data={this.state.exportResults.length > 0 ? this.state.exportResults : ''}>+ [Export]</CSVLink>\n                    </div> : null}\n                    <Row>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>VALUED AS OF</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title>{this.state.totalDate}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL FACE VALUE</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title>${this.state.totalDenomination}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL COST</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-price\" style={{ color: 'red' }}>${parseFloat(this.state.totalPrice).toFixed(2)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL INTEREST</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-interest\" style={{ color: '#ff8c00' }}>${parseFloat(this.state.totalInterest).toFixed(2)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={this.state.showCards}>\n                                <Card.Header className='card-header'>TOTAL VALUE</Card.Header>\n                                <Card.Body style={{ textAlign: 'center' }}>\n                                    <Card.Title id=\"card-value\" style={{ color: 'green' }}>${parseFloat(this.state.totalValue).toFixed(2)}</Card.Title>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div >\n                <div style={{ width: '100%', float: 'left', marginTop: '1em' }}>\n                    {\n                        this.state.bonds.length > 0 ?\n                            <Table striped bordered hover id=\"bond-table\" hidden={this.state.hideTable} onChange={this.state.changeTable} style={{ width: '100%', margin: 'auto', marginBottom: '2em' }}>\n                                <thead style={{ textAlign: \"center\", fontSize: \".75em\", textTransform: \"uppercase\" }}>\n                                    <tr>\n                                        <th>Serial Number</th>\n                                        <th>Bond Type</th>\n                                        <th>Bond Amount</th>\n                                        <th>Issue Date</th>\n                                        <th>Next Accrual</th>\n                                        <th>Final Maturity</th>\n                                        <th>Issue Price</th>\n                                        <th>Interest</th>\n                                        <th>Interest Rate</th>\n                                        <th>Value</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.bonds.map((bond) => (\n                                        <tr key={bond[1]}>\n                                            <td>{bond[0]}</td>\n                                            <td>{bond[1]}</td>\n                                            <td>{bond[2]}</td>\n                                            <td>{bond[3]}</td>\n                                            <td>{bond[4]}</td>\n                                            <td>{bond[5]}</td>\n                                            <td>{bond[6]}</td>\n                                            <td>{bond[7]}</td>\n                                            <td>{bond[8]}</td>\n                                            <td>{bond[9]}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table> : null}\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BondPricingTwo;\n\n"]},"metadata":{},"sourceType":"module"}