{"ast":null,"code":"var _jsxFileName = \"/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_spreadsheet.jsx\";\nimport React, { Component } from \"react\";\nimport { Form, Table, Card, Col, InputGroup, Button, OverlayTrigger, Tooltip, Pagination } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport '../index.css';\n\nclass BondPricingTwo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bonds: [],\n      exportBonds: [],\n      label: 'Import ...',\n      totalPrice: 0,\n      totalInterest: 0,\n      totalValue: 0,\n      totalDenomination: 0,\n      totalDate: this.formatDate(this.getCurrentMonth() + '/' + this.getCurrentYear()),\n      month: this.getCurrentMonth(),\n      year: this.getCurrentYear(),\n      hideTable: true,\n      showCards: {\n        visibility: 'hidden'\n      },\n      exportData: [],\n      export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n      exportResults: [],\n      pages: [],\n      perPage: 5,\n      currentPage: 0\n    };\n    this.setFilename = this.setFilename.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.onUpdateEnter = this.onUpdateEnter.bind(this);\n    this.onUpdateClick = this.onUpdateClick.bind(this);\n    this.setPrevPage = this.setPrevPage.bind(this);\n    this.setCurrentPage = this.setCurrentPage.bind(this);\n    this.setNextPage = this.setNextPage.bind(this);\n    this.exportOnClick = this.exportOnClick.bind(this);\n    this.handleClickX = this.handleClickX.bind(this);\n  }\n\n  setPages(bonds) {\n    let pages = [];\n    let pageCount = bonds.length / this.state.perPage;\n    let i = 0;\n\n    while (i < pageCount) {\n      pages.push(i);\n      i++;\n    }\n\n    this.setState({\n      pages: pages\n    });\n  }\n\n  exportOnClick() {\n    const bonds = this.state.bonds;\n    let bondExports = [];\n    bondExports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value']);\n\n    for (let i = 0; i < bonds.length; i++) {\n      let bondExport = [bonds[i]['vDate'], bonds[i]['serialNumber'], bonds[i]['series'], '$' + bonds[i]['denomination'], bonds[i]['iDate'], bonds[i]['aDate'], bonds[i]['mDate'], '$' + parseFloat(bonds[i]['iPrice']).toFixed(2), '$' + parseFloat(bonds[i]['interest']).toFixed(2), '$' + parseFloat(bonds[i]['value']).toFixed(2)];\n      bondExports.push(bondExport);\n    }\n\n    bondExports.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)]);\n    this.setState({\n      exportResults: bondExports\n    });\n  }\n\n  setCurrentPage(i) {\n    this.setState({\n      currentPage: i\n    });\n  }\n\n  setPrevPage() {\n    let showCount = (this.state.currentPage - 1) * this.state.perPage;\n\n    if (showCount >= 0) {\n      this.setState({\n        currentPage: this.state.currentPage - 1\n      });\n    }\n  }\n\n  setNextPage() {\n    let showCount = (this.state.currentPage + 1) * this.state.perPage;\n\n    if (showCount < this.state.bonds.length) {\n      this.setState({\n        currentPage: this.state.currentPage + 1\n      });\n    }\n  }\n\n  formatDate(value_date) {\n    const months = {\n      \"01\": \"Jan.\",\n      \"02\": \"Feb.\",\n      \"03\": \"March\",\n      \"04\": \"April\",\n      \"05\": \"May\",\n      \"06\": \"June\",\n      \"07\": \"July\",\n      \"08\": \"Aug.\",\n      \"09\": \"Sept\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    let month = value_date.split('/')[0];\n\n    if (month.length === 1) {\n      month = '0' + month;\n    }\n\n    let year = value_date.split('/')[1];\n    let month_string = months[month] + ' 1, ' + year;\n    return month_string;\n  }\n\n  getCurrentMonth() {\n    let d = new Date();\n    return d.getMonth() + 1;\n  }\n\n  getCurrentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  handleClickX(i) {\n    const newBonds = this.state.bonds;\n    let x = this.state.currentPage * this.state.perPage + i;\n    this.setState({\n      totalDenomination: this.state.totalDenomination - newBonds[x]['denomination'],\n      totalPrice: this.state.totalPrice - newBonds[x]['iPrice'],\n      totalInterest: this.state.totalInterest - newBonds[x]['interest'],\n      totalValue: this.state.totalValue - newBonds[x]['value']\n    });\n    newBonds.splice(x, 1);\n    this.setState({\n      bonds: newBonds\n    });\n    this.setPages(newBonds);\n  }\n\n  onUpdateEnter(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      this.setState({\n        showTooltip: {\n          visibility: 'hidden'\n        }\n      });\n    }, 3500);\n  }\n\n  onUpdateClick() {\n    const bondState = this.state.bonds;\n    let bonds = [];\n    let vMonth = document.getElementsByName('aMonth')[0].value;\n    let vYear = document.getElementsByName('aYear')[0].value;\n    let vDate = vMonth + '/' + vYear;\n\n    for (let i = 0; i < bondState.length; i++) {\n      let bond = {\n        'vMonth': vMonth,\n        'vYear': vYear,\n        'series': this.state.bonds[i]['series'],\n        'denomination': this.state.bonds[i]['denomination'],\n        'serialNumber': this.state.bonds[i]['serialNumber'],\n        'iDate': this.state.bonds[i]['iDate']\n      };\n      bonds.push(bond);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      if (response[0] !== 'error') {\n        this.setState({\n          totalDate: this.formatDate(response[1]['totalDate']),\n          totalDenomination: response[1]['totalDenominations'],\n          totalPrice: response[1]['totalPrices'],\n          totalInterest: response[1]['totalInterests'],\n          totalValue: response[1]['totalValues']\n        });\n        this.setState({\n          bonds: response[0]\n        });\n      } else {\n        this.setState({\n          totalDate: this.formatDate(vDate)\n        });\n      }\n    });\n  }\n\n  setFilename(e) {\n    if (e.target.files.length > 0) {\n      this.setState({\n        label: e.target.files[0].name\n      });\n    }\n\n    if (this.state.hideTable) {\n      this.setState({\n        hideTable: false,\n        showCards: {\n          visibility: 'visible'\n        }\n      });\n    }\n\n    var reader = new FileReader();\n\n    reader.onload = () => {\n      const bondCsv = reader.result;\n      let bonds = [];\n      let bondRow = bondCsv.split('\\r');\n\n      for (let i = 1; i < bondRow.length; i++) {\n        let bond = bond.split(',');\n        console.log(parseInt(bond[2].replace(/[$,]/g, '')));\n        let bondDict = {\n          'vMonth': document.getElementsByName('aMonth')[0].value,\n          'vYear': document.getElementsByName('aYear')[0].value,\n          'serialNumber': bond[0],\n          'series': bond[1],\n          'denomination': parseInt(bond[2].replace(/[$,]/g, '')),\n          'iDate': bond[3]\n        };\n        bonds.push(bondDict);\n      }\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n          bonds\n        })\n      };\n      fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n        this.setState({\n          bonds: response[0]\n        });\n        this.setState({\n          totalDate: this.formatDate(response[1]['totalDate']),\n          totalDenomination: response[1]['totalDenominations'],\n          totalPrice: response[1]['totalPrices'],\n          totalInterest: response[1]['totalInterests'],\n          totalValue: response[1]['totalValues']\n        });\n        this.setPages(response[0]);\n      });\n    };\n\n    reader.readAsText(e.target.files[0]);\n  }\n\n  convertValues(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron-pages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '70%',\n        minWidth: '850px',\n        margin: 'auto',\n        marginTop: '2em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      stlye: {\n        fontSize: '.90em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      style: {\n        float: 'left',\n        width: '20%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 33\n      }\n    }, \"VALUE AS OF\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: this.state.month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1992\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: this.state.year,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(OverlayTrigger, {\n      placement: \"right\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        style: this.state.showTooltip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 37\n        }\n      }, \"Revalue all bonds by this date.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      size: \"sm\",\n      variant: \"success\",\n      onMouseEnter: this.onUpdateEnter,\n      onClick: this.onUpdateClick,\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '.5em',\n        fontSize: '.55em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 37\n      }\n    }, \"UPDATE\")), /*#__PURE__*/React.createElement(Card, {\n      style: {\n        marginTop: '2em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 37\n      }\n    }, \"VALUED AS OF\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 41\n      }\n    }, this.state.totalDate))))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      style: {\n        marginLeft: '.5em',\n        minWidth: '700px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 33\n      }\n    }, \"ATTACHMENT\"), /*#__PURE__*/React.createElement(Form.File, {\n      id: \"custom-file\",\n      label: this.state.label,\n      onChange: this.setFilename,\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-spreadsheet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 37\n      }\n    }, \"TOTAL FACE VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(this.state.totalDenomination)))), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-spreadsheet card-margin-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 37\n      }\n    }, \"TOTAL PRICE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-price\",\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalPrice).toFixed(2))))), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-spreadsheet card-margin-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 37\n      }\n    }, \"TOTAL INTEREST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-interest\",\n      style: {\n        color: '#ff8c00'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalInterest).toFixed(2))))), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-spreadsheet card-margin-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 37\n      }\n    }, \"TOTAL VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-value\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalValue).toFixed(2)))))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"card-container\",\n      style: {\n        width: '100%',\n        float: 'left',\n        paddingTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 21\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.exportOnClick,\n      style: {\n        width: '100%',\n        textAlign: 'right',\n        marginBottom: '.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 56\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: 'bonds_valued_from_' + this.state.month + '_' + this.state.year,\n      data: this.state.exportResults.length > 0 ? this.state.exportResults : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 29\n      }\n    }, \"+ [Export]\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        float: 'left',\n        margin: '0 0 1em 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      id: \"bond-table\",\n      hidden: this.state.hideTable,\n      onChange: this.state.changeTable,\n      style: {\n        width: '100%',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \".75em\",\n        textTransform: \"uppercase\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 49\n      }\n    }, \"Serial Number\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 49\n      }\n    }, \"Series\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 49\n      }\n    }, \"Face Value\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 49\n      }\n    }, \"Issue Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 49\n      }\n    }, \"Next Accrual\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 49\n      }\n    }, \"Final Maturity\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 49\n      }\n    }, \"Issue Price\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 49\n      }\n    }, \"Interest\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 49\n      }\n    }, \"Value\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 41\n      }\n    }, this.state.bonds.slice(this.state.currentPage * this.state.perPage, (this.state.currentPage + 1) * this.state.perPage).map((bond, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 57\n      }\n    }, bond['serialNumber']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 57\n      }\n    }, bond['series']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(bond['denomination'])), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 57\n      }\n    }, bond['iDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 57\n      }\n    }, bond['aDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 57\n      }\n    }, bond['mDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['iPrice']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['interest']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['value']).toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleClickX(i),\n      className: \"close\",\n      style: {\n        position: 'absolute',\n        top: '.5em',\n        right: '-1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      style: {\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 65\n      }\n    }, \"\\xD7\"))))))), this.state.bonds.length > this.state.perPage ? /*#__PURE__*/React.createElement(Pagination, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Pagination.Prev, {\n      onClick: this.setPrevPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 45\n      }\n    }), this.state.pages.map(i => /*#__PURE__*/React.createElement(Pagination.Item, {\n      active: i === this.state.currentPage,\n      key: i,\n      onClick: () => this.setCurrentPage(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 49\n      }\n    }, i + 1)), /*#__PURE__*/React.createElement(Pagination.Next, {\n      onClick: this.setNextPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 45\n      }\n    })) : null) : null)));\n  }\n\n}\n\nexport default BondPricingTwo;","map":{"version":3,"sources":["/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_spreadsheet.jsx"],"names":["React","Component","Form","Table","Card","Col","InputGroup","Button","OverlayTrigger","Tooltip","Pagination","CSVLink","BondPricingTwo","constructor","props","state","bonds","exportBonds","label","totalPrice","totalInterest","totalValue","totalDenomination","totalDate","formatDate","getCurrentMonth","getCurrentYear","month","year","hideTable","showCards","visibility","exportData","export","exportResults","pages","perPage","currentPage","setFilename","bind","onUpdateEnter","onUpdateClick","setPrevPage","setCurrentPage","setNextPage","exportOnClick","handleClickX","setPages","pageCount","length","i","push","setState","bondExports","bondExport","parseFloat","toFixed","showCount","value_date","months","split","month_string","d","Date","getMonth","getFullYear","newBonds","x","splice","e","preventDefault","setTimeout","showTooltip","bondState","vMonth","document","getElementsByName","value","vYear","vDate","bond","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","target","files","name","reader","FileReader","onload","bondCsv","result","bondRow","console","log","parseInt","replace","bondDict","readAsText","convertValues","toString","render","width","minWidth","margin","marginTop","fontSize","float","marginLeft","position","top","right","fontWeight","textAlign","color","paddingTop","marginBottom","changeTable","textTransform","slice","map","border"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Table, Card, Col, InputGroup, Button, OverlayTrigger, Tooltip, Pagination } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport '../index.css'\n\n\nclass BondPricingTwo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bonds: [],\n            exportBonds: [],\n            label: 'Import ...',\n            totalPrice: 0,\n            totalInterest: 0,\n            totalValue: 0,\n            totalDenomination: 0,\n            totalDate: this.formatDate(this.getCurrentMonth() + '/' + this.getCurrentYear()),\n            month: this.getCurrentMonth(),\n            year: this.getCurrentYear(),\n            hideTable: true,\n            showCards: { visibility: 'hidden' },\n            exportData: [],\n            export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n            exportResults: [],\n            pages: [],\n            perPage: 5,\n            currentPage: 0\n        };\n\n        this.setFilename = this.setFilename.bind(this)\n        this.formatDate = this.formatDate.bind(this)\n        this.onUpdateEnter = this.onUpdateEnter.bind(this)\n        this.onUpdateClick = this.onUpdateClick.bind(this)\n        this.setPrevPage = this.setPrevPage.bind(this)\n        this.setCurrentPage = this.setCurrentPage.bind(this)\n        this.setNextPage = this.setNextPage.bind(this)\n        this.exportOnClick = this.exportOnClick.bind(this)\n        this.handleClickX = this.handleClickX.bind(this)\n    }\n\n    setPages(bonds) {\n        let pages = []\n        let pageCount = bonds.length / this.state.perPage\n\n        let i = 0\n        while (i < pageCount) {\n            pages.push(i)\n\n            i++\n        }\n\n        this.setState({ pages: pages })\n    }\n\n    exportOnClick() {\n        const bonds = this.state.bonds\n\n        let bondExports = []\n\n        bondExports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value'])\n\n        for (let i = 0; i < bonds.length; i++) {\n\n            let bondExport = [\n                bonds[i]['vDate'],\n                bonds[i]['serialNumber'],\n                bonds[i]['series'],\n                '$' + bonds[i]['denomination'],\n                bonds[i]['iDate'],\n                bonds[i]['aDate'],\n                bonds[i]['mDate'],\n                '$' + parseFloat(bonds[i]['iPrice']).toFixed(2),\n                '$' + parseFloat(bonds[i]['interest']).toFixed(2),\n                '$' + parseFloat(bonds[i]['value']).toFixed(2)\n            ]\n\n            bondExports.push(bondExport);\n        }\n\n        bondExports.push([\n            \"\",\n            \"\",\n            \"\",\n            '$' + this.state.totalDenomination,\n            \"\",\n            \"\",\n            \"\",\n            '$' + parseFloat(this.state.totalPrice).toFixed(2),\n            '$' + parseFloat(this.state.totalInterest).toFixed(2),\n            '$' + parseFloat(this.state.totalValue).toFixed(2)\n        ])\n\n        this.setState({ exportResults: bondExports })\n    }\n\n    setCurrentPage(i) {\n        this.setState({ currentPage: i })\n    }\n\n    setPrevPage() {\n        let showCount = (this.state.currentPage - 1) * this.state.perPage\n        if (showCount >= 0) {\n            this.setState({ currentPage: this.state.currentPage - 1 })\n        }\n    }\n\n\n    setNextPage() {\n        let showCount = (this.state.currentPage + 1) * this.state.perPage\n        if (showCount < this.state.bonds.length) {\n            this.setState({ currentPage: this.state.currentPage + 1 })\n        }\n    }\n\n    formatDate(value_date) {\n        const months = { \"01\": \"Jan.\", \"02\": \"Feb.\", \"03\": \"March\", \"04\": \"April\", \"05\": \"May\", \"06\": \"June\", \"07\": \"July\", \"08\": \"Aug.\", \"09\": \"Sept\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\" }\n\n        let month = value_date.split('/')[0]\n\n        if (month.length === 1) {\n            month = '0' + month\n        }\n\n        let year = value_date.split('/')[1]\n\n        let month_string = months[month] + ' 1, ' + year\n\n        return month_string\n    }\n\n    getCurrentMonth() {\n        let d = new Date();\n        return d.getMonth() + 1\n    }\n\n    getCurrentYear() {\n        let d = new Date();\n\n        return d.getFullYear()\n    }\n\n    handleClickX(i) {\n        const newBonds = this.state.bonds\n\n        let x = (this.state.currentPage * this.state.perPage) + i\n\n        this.setState({\n            totalDenomination: this.state.totalDenomination - newBonds[x]['denomination'],\n            totalPrice: this.state.totalPrice - newBonds[x]['iPrice'],\n            totalInterest: this.state.totalInterest - newBonds[x]['interest'],\n            totalValue: this.state.totalValue - newBonds[x]['value']\n        })\n\n        newBonds.splice(x, 1)\n        this.setState({ bonds: newBonds })\n\n        this.setPages(newBonds)\n    }\n\n    onUpdateEnter(e) {\n        e.preventDefault();\n\n        setTimeout(() => {\n            this.setState({ showTooltip: { visibility: 'hidden' } })\n        }, 3500)\n    }\n\n    onUpdateClick() {\n        const bondState = this.state.bonds\n\n        let bonds = []\n\n        let vMonth = document.getElementsByName('aMonth')[0].value\n        let vYear = document.getElementsByName('aYear')[0].value\n        let vDate = vMonth + '/' + vYear\n\n        for (let i = 0; i < bondState.length; i++) {\n            let bond = {\n                'vMonth': vMonth,\n                'vYear': vYear,\n                'series': this.state.bonds[i]['series'],\n                'denomination': this.state.bonds[i]['denomination'],\n                'serialNumber': this.state.bonds[i]['serialNumber'],\n                'iDate': this.state.bonds[i]['iDate']\n            }\n\n            bonds.push(bond)\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                if (response[0] !== 'error') {\n                    this.setState({\n                        totalDate: this.formatDate(response[1]['totalDate']),\n                        totalDenomination: response[1]['totalDenominations'],\n                        totalPrice: response[1]['totalPrices'],\n                        totalInterest: response[1]['totalInterests'],\n                        totalValue: response[1]['totalValues']\n                    })\n\n                    this.setState({ bonds: response[0] })\n                }\n                else {\n                    this.setState({ totalDate: this.formatDate(vDate) })\n                }\n            })\n    }\n\n    setFilename(e) {\n        if (e.target.files.length > 0) {\n            this.setState({ label: e.target.files[0].name })\n        }\n\n        if (this.state.hideTable) {\n            this.setState({ hideTable: false, showCards: { visibility: 'visible' } })\n        }\n\n        var reader = new FileReader();\n\n        reader.onload = () => {\n            const bondCsv = reader.result\n\n            let bonds = []\n\n            let bondRow = bondCsv.split('\\r')\n\n\n            for (let i = 1; i < bondRow.length; i++) {\n                let bond = bond.split(',')\n\n                console.log(parseInt(bond[2].replace(/[$,]/g, '')))\n\n                let bondDict = {\n                    'vMonth': document.getElementsByName('aMonth')[0].value,\n                    'vYear': document.getElementsByName('aYear')[0].value,\n                    'serialNumber': bond[0],\n                    'series': bond[1],\n                    'denomination': parseInt(bond[2].replace(/[$,]/g, '')),\n                    'iDate': bond[3]\n                }\n\n                bonds.push(bondDict)\n            }\n\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n                body: JSON.stringify({ bonds })\n            };\n\n            fetch('http://localhost:5000/update', requestOptions)\n                .then(response => response.json())\n                .then(response => {\n                    this.setState({ bonds: response[0] })\n\n                    this.setState({\n                        totalDate: this.formatDate(response[1]['totalDate']),\n                        totalDenomination: response[1]['totalDenominations'],\n                        totalPrice: response[1]['totalPrices'],\n                        totalInterest: response[1]['totalInterests'],\n                        totalValue: response[1]['totalValues']\n                    })\n\n                    this.setPages(response[0])\n                })\n        }\n\n        reader.readAsText(e.target.files[0]);\n    }\n\n    convertValues(value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron-pages\"></div>\n                <div style={{ width: '70%', minWidth: '850px', margin: 'auto', marginTop: '2em' }}>\n                    <Form stlye={{ fontSize: '.90em' }}>\n                        <Form.Row style={{ float: 'left', width: '20%' }}>\n                            <Col>\n                                <Form.Label>VALUE AS OF</Form.Label>\n                                <InputGroup>\n                                    <Form.Control\n                                        required\n                                        name=\"aMonth\"\n                                        type=\"number\"\n                                        placeholder=\"Month\"\n                                        min=\"1\"\n                                        max=\"12\"\n                                        defaultValue={this.state.month}\n                                    />\n                                    <InputGroup.Append>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                    </InputGroup.Append>\n                                    <Form.Control\n                                        required\n                                        name=\"aYear\"\n                                        type=\"number\"\n                                        placeholder=\"Year\"\n                                        maxLength=\"4\"\n                                        min=\"1992\"\n                                        max={this.state.year}\n                                        style={{ marginLeft: '-1px' }}\n                                        defaultValue={this.state.year}\n                                    />\n                                </InputGroup>\n                                <OverlayTrigger placement='right' overlay={\n                                    <Tooltip style={this.state.showTooltip}>\n                                        Revalue all bonds by this date.\n                                    </Tooltip>}>\n                                    <Button type=\"button\" size='sm' variant='success' onMouseEnter={this.onUpdateEnter} onClick={this.onUpdateClick} style={{ position: 'absolute', top: '0', right: '.5em', fontSize: '.55em', fontWeight: 'bold' }}>UPDATE</Button>\n                                </OverlayTrigger>\n                                <Card style={{ marginTop: '2em' }}>\n                                    <Card.Header className='card-header'>VALUED AS OF</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title>{this.state.totalDate}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Form.Row>\n                        <Form.Row>\n                            <Col style={{ marginLeft: '.5em', minWidth: '700px' }}>\n                                <Form.Label>ATTACHMENT</Form.Label>\n                                <Form.File\n                                    id=\"custom-file\"\n                                    label={this.state.label}\n                                    onChange={this.setFilename}\n                                    custom\n                                />\n                                <Card className='card-spreadsheet'>\n                                    <Card.Header className='card-header'>TOTAL FACE VALUE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title>${this.convertValues(this.state.totalDenomination)}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                                <Card className='card-spreadsheet card-margin-left'>\n                                    <Card.Header className='card-header'>TOTAL PRICE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-price\" style={{ color: 'red' }}>${this.convertValues(parseFloat(this.state.totalPrice).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                                <Card className='card-spreadsheet card-margin-left'>\n                                    <Card.Header className='card-header'>TOTAL INTEREST</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-interest\" style={{ color: '#ff8c00' }}>${this.convertValues(parseFloat(this.state.totalInterest).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                                <Card className='card-spreadsheet card-margin-left'>\n                                    <Card.Header className='card-header'>TOTAL VALUE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-value\" style={{ color: 'green' }}>${this.convertValues(parseFloat(this.state.totalValue).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Form.Row>\n                    </Form>\n                    <div id=\"card-container\" style={{ width: '100%', float: 'left', paddingTop: '1em' }}>\n                        {this.state.bonds.length > 0 ? <div onClick={this.exportOnClick} style={{ width: '100%', textAlign: 'right', marginBottom: '.25em' }}>\n                            <CSVLink filename={'bonds_valued_from_' + this.state.month + '_' + this.state.year} data={this.state.exportResults.length > 0 ? this.state.exportResults : ''}>+ [Export]</CSVLink>\n                        </div> : null}\n                    </div >\n                    <div style={{ width: '100%', float: 'left', margin: '0 0 1em 0' }}>\n                        {\n                            this.state.bonds.length > 0 ?\n                                <div>\n                                    <Table striped bordered hover id=\"bond-table\" hidden={this.state.hideTable} onChange={this.state.changeTable} style={{ width: '100%', margin: 'auto' }}>\n                                        <thead style={{ textAlign: \"center\", fontSize: \".75em\", textTransform: \"uppercase\" }}>\n                                            <tr>\n                                                <th>Serial Number</th>\n                                                <th>Series</th>\n                                                <th>Face Value</th>\n                                                <th>Issue Date</th>\n                                                <th>Next Accrual</th>\n                                                <th>Final Maturity</th>\n                                                <th>Issue Price</th>\n                                                <th>Interest</th>\n                                                <th>Value</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {this.state.bonds\n                                                .slice(this.state.currentPage * this.state.perPage, (this.state.currentPage + 1) * this.state.perPage)\n                                                .map((bond, i) => (\n                                                    <tr key={i}>\n                                                        <td>{bond['serialNumber']}</td>\n                                                        <td>{bond['series']}</td>\n                                                        <td>${this.convertValues(bond['denomination'])}</td>\n                                                        <td>{bond['iDate']}</td>\n                                                        <td>{bond['aDate']}</td>\n                                                        <td>{bond['mDate']}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['iPrice']).toFixed(2))}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['interest']).toFixed(2))}</td>\n                                                        <td style={{ position: 'relative' }}>\n                                                            ${this.convertValues(parseFloat(bond['value']).toFixed(2))}\n                                                            <button onClick={() => this.handleClickX(i)} className='close' style={{ position: 'absolute', top: '.5em', right: '-1em' }}>\n                                                                <span aria-hidden='true' style={{ border: 'none' }}>&times;</span>\n                                                            </button>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </Table>\n                                    {this.state.bonds.length > this.state.perPage ?\n                                        <Pagination size='sm'>\n                                            <Pagination.Prev onClick={this.setPrevPage} />\n                                            {this.state.pages.map((i) => (\n                                                <Pagination.Item active={i === this.state.currentPage} key={i} onClick={() => this.setCurrentPage(i)}>{i + 1}</Pagination.Item>\n                                            ))}\n                                            <Pagination.Next onClick={this.setNextPage} />\n                                        </Pagination>\n                                        : null}\n                                </div>\n                                : null}\n\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default BondPricingTwo;\n"]},"metadata":{},"sourceType":"module"}