{"ast":null,"code":"var _jsxFileName = \"/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_individual.jsx\";\nimport React, { Component } from 'react';\nimport { Form, Col, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card, Pagination, Alert } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css';\n\nclass BondPricingOne extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bonds: [],\n      totalPrice: 0,\n      totalInterest: 0,\n      totalValue: 0,\n      totalDenomination: 0,\n      totalDate: this.formatDate(this.getCurrentMonth() + '/' + this.getCurrentYear()),\n      month: this.getCurrentMonth(),\n      year: this.getCurrentYear(),\n      updateDate: this.getCurrentMonth() + '/' + this.getCurrentYear(),\n      showTooltip: {\n        visibility: 'visible'\n      },\n      showCards: {\n        visibility: 'hidden'\n      },\n      hideTable: true,\n      export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n      exportResults: [],\n      pages: [],\n      perPage: 5,\n      currentPage: 0,\n      errorMessage: null,\n      denominationOptions: [50, 75, 100, 200, 500, 1000, 5000, 10000]\n    };\n    this.onUpdateEnter = this.onUpdateEnter.bind(this);\n    this.onUpdateClick = this.onUpdateClick.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n    this.setPrevPage = this.setPrevPage.bind(this);\n    this.setCurrentPage = this.setCurrentPage.bind(this);\n    this.setNextPage = this.setNextPage.bind(this);\n    this.exportOnClick = this.exportOnClick.bind(this);\n    this.handleClickX = this.handleClickX.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(document.getElementsByClassName('card')[0].offsetWidth);\n  }\n\n  handleError(series) {\n    if (series === 'I') {\n      this.setState({\n        errorMessage: \"Series I Bonds have been issued from September, 1998 to the present.\"\n      });\n    } else if (series === 'EE') {\n      this.setState({\n        errorMessage: \"Series EE Bonds have been issued from January, 1980 to the present.\"\n      });\n    } else if (series === 'E') {\n      this.setState({\n        errorMessage: \"Series E Bonds were issued between May, 1941 and June, 1980.\"\n      });\n    } else if (series === 'S') {\n      this.setState({\n        errorMessage: \"Savings Notes were issued between May, 1967 and October, 1970.\"\n      });\n    }\n  }\n\n  handleClickX(i) {\n    const newBonds = this.state.bonds;\n    let x = this.state.currentPage * this.state.perPage + i;\n    this.setState({\n      totalDenomination: this.state.totalDenomination - newBonds[x]['denomination'],\n      totalPrice: this.state.totalPrice - newBonds[x]['iPrice'],\n      totalInterest: this.state.totalInterest - newBonds[x]['interest'],\n      totalValue: this.state.totalValue - newBonds[x]['value']\n    });\n    newBonds.splice(x, 1);\n    this.setState({\n      bonds: newBonds\n    });\n    this.setPages(newBonds);\n  }\n\n  setPages(bonds) {\n    let pages = [];\n    let pageCount = bonds.length / this.state.perPage;\n    let i = 0;\n\n    while (i < pageCount) {\n      pages.push(i);\n      i++;\n    }\n\n    this.setState({\n      pages: pages\n    });\n  }\n\n  exportOnClick() {\n    const bonds = this.state.bonds;\n    let bondExports = [];\n    bondExports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value']);\n\n    for (let i = 0; i < bonds.length; i++) {\n      let bondExport = [bonds[i]['vDate'], bonds[i]['serialNumber'], bonds[i]['series'], '$' + bonds[i]['denomination'], bonds[i]['iDate'], bonds[i]['aDate'], bonds[i]['mDate'], '$' + parseFloat(bonds[i]['iPrice']).toFixed(2), '$' + parseFloat(bonds[i]['interest']).toFixed(2), '$' + parseFloat(bonds[i]['value']).toFixed(2)];\n      bondExports.push(bondExport);\n    }\n\n    bondExports.push([\"\", \"\", \"\", '$' + this.state.totalDenomination, \"\", \"\", \"\", '$' + parseFloat(this.state.totalPrice).toFixed(2), '$' + parseFloat(this.state.totalInterest).toFixed(2), '$' + parseFloat(this.state.totalValue).toFixed(2)]);\n    this.setState({\n      exportResults: bondExports\n    });\n  }\n\n  setCurrentPage(i) {\n    this.setState({\n      currentPage: i\n    });\n  }\n\n  setPrevPage() {\n    let showCount = (this.state.currentPage - 1) * this.state.perPage;\n\n    if (showCount >= 0) {\n      this.setState({\n        currentPage: this.state.currentPage - 1\n      });\n    }\n  }\n\n  setNextPage() {\n    let showCount = (this.state.currentPage + 1) * this.state.perPage;\n\n    if (showCount < this.state.bonds.length) {\n      this.setState({\n        currentPage: this.state.currentPage + 1\n      });\n    }\n  }\n\n  formatDate(value_date) {\n    const months = {\n      \"1\": \"Jan.\",\n      \"2\": \"Feb.\",\n      \"3\": \"March\",\n      \"4\": \"April\",\n      \"5\": \"May\",\n      \"6\": \"June\",\n      \"7\": \"July\",\n      \"8\": \"Aug.\",\n      \"9\": \"Sept\",\n      \"10\": \"Oct\",\n      \"11\": \"Nov\",\n      \"12\": \"Dec\"\n    };\n    let month = value_date.split('/')[0];\n    let year = value_date.split('/')[1];\n    let month_string = months[parseInt(month)] + ' 1, ' + year;\n    return month_string;\n  }\n\n  getCurrentMonth() {\n    let d = new Date();\n    return d.getMonth() + 1;\n  }\n\n  getCurrentYear() {\n    let d = new Date();\n    return d.getFullYear();\n  }\n\n  onUpdateEnter(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      this.setState({\n        showTooltip: {\n          visibility: 'hidden'\n        }\n      });\n    }, 3500);\n  }\n\n  onUpdateClick() {\n    const bondState = this.state.bonds;\n    let bonds = [];\n    let vMonth = document.getElementsByName('aMonth')[0].value;\n    let vYear = document.getElementsByName('aYear')[0].value;\n    let vDate = vMonth + '/' + vYear;\n    this.setState({\n      updateDate: vDate\n    });\n\n    for (let i = 0; i < bondState.length; i++) {\n      let bond = {\n        'vMonth': vMonth,\n        'vYear': vYear,\n        'series': this.state.bonds[i]['series'],\n        'denomination': this.state.bonds[i]['denomination'],\n        'serialNumber': this.state.bonds[i]['serialNumber'],\n        'iDate': this.state.bonds[i]['iDate']\n      };\n      bonds.push(bond);\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      if (response[0] !== 'error') {\n        this.setState({\n          totalDate: this.formatDate(response[1]['totalDate']),\n          totalDenomination: response[1]['totalDenominations'],\n          totalPrice: response[1]['totalPrices'],\n          totalInterest: response[1]['totalInterests'],\n          totalValue: response[1]['totalValues']\n        });\n        this.setState({\n          bonds: response[0]\n        });\n      } else {\n        this.setState({\n          totalDate: this.formatDate(vDate)\n        });\n      }\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const bondState = this.state.bonds;\n    const series = e.target.series.value;\n    let currentDate = e.target.aMonth.value + '/' + e.target.aYear.value;\n    let bonds = [];\n    let bond = {\n      'vMonth': e.target.aMonth.value,\n      'vYear': e.target.aYear.value,\n      'series': e.target.series.value,\n      'denomination': parseInt(e.target.denomination.value),\n      'serialNumber': e.target.serialnumber.value,\n      'iDate': e.target.iMonth.value + '/' + e.target.iYear.value\n    };\n    bonds.push(bond);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        bonds\n      })\n    };\n    fetch('http://localhost:5000/update', requestOptions).then(response => response.json()).then(response => {\n      try {\n        if (response[0] !== 'error') {\n          const {\n            bonds,\n            totalDenomination,\n            totalPrice,\n            totalInterest,\n            totalValue\n          } = this.state;\n          let nextBond = response[0];\n\n          if (bonds.length > 0) {\n            for (let i = 0; i < bonds.length; i++) {\n              nextBond.push(bonds[i]);\n            }\n          }\n\n          this.setState({\n            bonds: nextBond,\n            errorMessage: null\n          });\n          this.setState({\n            totalDate: this.formatDate(response[1]['totalDate']),\n            totalDenomination: totalDenomination + response[1]['totalDenominations'],\n            totalPrice: totalPrice + response[1]['totalPrices'],\n            totalInterest: totalInterest + response[1]['totalInterests'],\n            totalValue: totalValue + response[1]['totalValues']\n          });\n          this.setState({\n            hideTable: false\n          });\n          this.setPages(nextBond);\n\n          if (bondState.length > 0 && this.state.updateDate !== currentDate) {\n            this.onUpdateClick();\n          }\n        } else {\n          this.handleError(series);\n        }\n      } catch {\n        this.handleError(series);\n      }\n    });\n  }\n\n  convertValues(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  onSeriesChange() {\n    let series = document.getElementsByName('series')[0].value;\n\n    if (series === 'S') {\n      this.setState({\n        denominationOptions: [25, 50, 75, 100]\n      });\n    } else if (series === 'E') {\n      this.setState({\n        denominationOptions: [25, 50, 75, 100, 200, 500, 1000, 5000, 10000]\n      });\n    } else {\n      this.setState({\n        denominationOptions: [50, 75, 100, 200, 500, 1000, 5000, 10000]\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron-pages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }\n    }), this.state.errorMessage ? /*#__PURE__*/React.createElement(Alert, {\n      key: this.state.errorMessage,\n      variant: \"danger\",\n      style: {\n        width: '70%',\n        margin: 'auto',\n        fontSize: '.9em',\n        textAlign: 'center',\n        marginTop: '.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }\n    }, this.state.errorMessage) : null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '70%',\n        minWidth: '850px',\n        margin: 'auto',\n        marginTop: '2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      style: {\n        width: '100%',\n        fontSize: '14px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 33\n      }\n    }, \"VALUE AS OF\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      min: \"1\",\n      max: \"12\",\n      defaultValue: this.state.month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"aYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      min: \"1992\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      defaultValue: this.state.year,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(OverlayTrigger, {\n      placement: \"right\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        style: this.state.showTooltip,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 37\n        }\n      }, \"Revalue all bonds by this date.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      size: \"sm\",\n      variant: \"success\",\n      onMouseEnter: this.onUpdateEnter,\n      onClick: this.onUpdateClick,\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '.75em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 37\n      }\n    }, \"UPDATE\")), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-margin-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 37\n      }\n    }, \"VALUED FROM\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 41\n      }\n    }, this.state.totalDate)))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 33\n      }\n    }, \"SERIES\"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: () => this.onSeriesChange(),\n      name: \"series\",\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"EE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 37\n      }\n    }, \"EE Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"I\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 37\n      }\n    }, \"I Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"E\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 37\n      }\n    }, \"E Bond\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"S\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 37\n      }\n    }, \"Savings Note\")), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-margin-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 37\n      }\n    }, \"TOTAL FACE VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(this.state.totalDenomination))))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 33\n      }\n    }, \"DENOMINATION\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"denomination\",\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 33\n      }\n    }, this.state.denominationOptions.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n      key: opt,\n      value: opt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(opt)))), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-margin-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 37\n      }\n    }, \"TOTAL PRICE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-price\",\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalPrice).toFixed(2)))))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 33\n      }\n    }, \"SERIAL NUMBER\"), /*#__PURE__*/React.createElement(Form.Control, {\n      name: \"serialnumber\",\n      type: \"text\",\n      placeholder: \"Optional\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-margin-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 37\n      }\n    }, \"TOTAL INTEREST\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-interest\",\n      style: {\n        color: '#ff8c00'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalInterest).toFixed(2)))))), /*#__PURE__*/React.createElement(Col, {\n      className: \"col-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 33\n      }\n    }, \"ISSUE DATE\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"iMonth\",\n      type: \"number\",\n      placeholder: \"Month\",\n      maxLength: \"2\",\n      min: \"1\",\n      max: \"12\",\n      className: this.state.errorMessage ? 'highlight' : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"inputGroupPrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      name: \"iYear\",\n      type: \"number\",\n      placeholder: \"Year\",\n      maxLength: \"4\",\n      max: this.state.year,\n      style: {\n        marginLeft: '-1px'\n      },\n      className: this.state.errorMessage ? 'highlight' : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      size: \"sm\",\n      style: {\n        position: 'absolute',\n        top: '0',\n        right: '.5em',\n        fontSize: '.65em',\n        fontWeight: 'bold'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 33\n      }\n    }, \"SUBMIT\"), /*#__PURE__*/React.createElement(Card, {\n      className: \"card-margin-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 37\n      }\n    }, \"TOTAL VALUE\"), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      id: \"card-value\",\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 41\n      }\n    }, \"$\", this.convertValues(parseFloat(this.state.totalValue).toFixed(2)))))))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"card-container\",\n      style: {\n        width: '100%',\n        float: 'left',\n        paddingTop: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 21\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.exportOnClick,\n      style: {\n        width: '100%',\n        textAlign: 'right',\n        marginBottom: '.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 56\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      filename: 'bonds_valued_from_' + this.state.month + '_' + this.state.year,\n      data: this.state.exportResults.length > 0 ? this.state.exportResults : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 29\n      }\n    }, \"Export\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        float: 'left',\n        margin: '0 0 1em 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 21\n      }\n    }, this.state.bonds.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      id: \"bond-table\",\n      hidden: this.state.hideTable,\n      onChange: this.state.changeTable,\n      style: {\n        width: '100%',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      style: {\n        textAlign: \"center\",\n        fontSize: \".75em\",\n        textTransform: \"uppercase\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 49\n      }\n    }, \"Serial #\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 49\n      }\n    }, \"Series\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 49\n      }\n    }, \"Face Value\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 49\n      }\n    }, \"Issue Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 49\n      }\n    }, \"Next Accrual\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 49\n      }\n    }, \"Final Maturity\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 49\n      }\n    }, \"Issue Price\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 49\n      }\n    }, \"Interest\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 49\n      }\n    }, \"Value\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 41\n      }\n    }, this.state.bonds.slice(this.state.currentPage * this.state.perPage, (this.state.currentPage + 1) * this.state.perPage).map((bond, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 57\n      }\n    }, bond['serialNumber']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 57\n      }\n    }, bond['series']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(bond['denomination'])), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 57\n      }\n    }, bond['iDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 57\n      }\n    }, bond['aDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 57\n      }\n    }, bond['mDate']), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['iPrice']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['interest']).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 57\n      }\n    }, \"$\", this.convertValues(parseFloat(bond['value']).toFixed(2)), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.handleClickX(i),\n      className: \"close\",\n      style: {\n        position: 'absolute',\n        top: '.5em',\n        right: '-1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      style: {\n        border: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 65\n      }\n    }, \"\\xD7\"))))))), this.state.bonds.length > this.state.perPage ? /*#__PURE__*/React.createElement(Pagination, {\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Pagination.Prev, {\n      onClick: this.setPrevPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 45\n      }\n    }), this.state.pages.map(i => /*#__PURE__*/React.createElement(Pagination.Item, {\n      active: i === this.state.currentPage,\n      key: i,\n      onClick: () => this.setCurrentPage(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 49\n      }\n    }, i + 1)), /*#__PURE__*/React.createElement(Pagination.Next, {\n      onClick: this.setNextPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 45\n      }\n    })) : null) : null)));\n  }\n\n}\n\nexport default BondPricingOne;","map":{"version":3,"sources":["/Users/greggvanorden/Desktop/bonds_react_app/bonds-react-app/src/components/bond_pricing_individual.jsx"],"names":["React","Component","Form","Col","InputGroup","Button","OverlayTrigger","Tooltip","Table","Card","Pagination","Alert","CSVLink","BondPricingOne","constructor","props","state","bonds","totalPrice","totalInterest","totalValue","totalDenomination","totalDate","formatDate","getCurrentMonth","getCurrentYear","month","year","updateDate","showTooltip","visibility","showCards","hideTable","export","exportResults","pages","perPage","currentPage","errorMessage","denominationOptions","onUpdateEnter","bind","onUpdateClick","onSubmit","setPrevPage","setCurrentPage","setNextPage","exportOnClick","handleClickX","componentDidMount","console","log","document","getElementsByClassName","offsetWidth","handleError","series","setState","i","newBonds","x","splice","setPages","pageCount","length","push","bondExports","bondExport","parseFloat","toFixed","showCount","value_date","months","split","month_string","parseInt","d","Date","getMonth","getFullYear","e","preventDefault","setTimeout","bondState","vMonth","getElementsByName","value","vYear","vDate","bond","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","target","currentDate","aMonth","aYear","denomination","serialnumber","iMonth","iYear","nextBond","convertValues","toString","replace","onSeriesChange","render","width","margin","fontSize","textAlign","marginTop","minWidth","marginLeft","position","top","right","fontWeight","map","opt","color","float","paddingTop","marginBottom","changeTable","textTransform","slice","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,MAAhC,EAAwCC,cAAxC,EAAwDC,OAAxD,EAAiEC,KAAjE,EAAwEC,IAAxE,EAA8EC,UAA9E,EAA0FC,KAA1F,QAAuG,iBAAvG;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,cAAP;;AAEA,MAAMC,cAAN,SAA6BZ,SAA7B,CAAuC;AACnCa,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,UAAU,EAAE,CAFH;AAGTC,MAAAA,aAAa,EAAE,CAHN;AAITC,MAAAA,UAAU,EAAE,CAJH;AAKTC,MAAAA,iBAAiB,EAAE,CALV;AAMTC,MAAAA,SAAS,EAAE,KAAKC,UAAL,CAAgB,KAAKC,eAAL,KAAyB,GAAzB,GAA+B,KAAKC,cAAL,EAA/C,CANF;AAOTC,MAAAA,KAAK,EAAE,KAAKF,eAAL,EAPE;AAQTG,MAAAA,IAAI,EAAE,KAAKF,cAAL,EARG;AASTG,MAAAA,UAAU,EAAE,KAAKJ,eAAL,KAAyB,GAAzB,GAA+B,KAAKC,cAAL,EATlC;AAUTI,MAAAA,WAAW,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAVJ;AAWTC,MAAAA,SAAS,EAAE;AAAED,QAAAA,UAAU,EAAE;AAAd,OAXF;AAYTE,MAAAA,SAAS,EAAE,IAZF;AAaTC,MAAAA,MAAM,EAAE,qHAbC;AAcTC,MAAAA,aAAa,EAAE,EAdN;AAeTC,MAAAA,KAAK,EAAE,EAfE;AAgBTC,MAAAA,OAAO,EAAE,CAhBA;AAiBTC,MAAAA,WAAW,EAAE,CAjBJ;AAkBTC,MAAAA,YAAY,EAAE,IAlBL;AAmBTC,MAAAA,mBAAmB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,KAApC;AAnBZ,KAAb;AAsBA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKlB,UAAL,GAAkB,KAAKA,UAAL,CAAgBkB,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,WAAL,GAAmB,KAAKA,WAAL,CAAiBH,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKI,cAAL,GAAsB,KAAKA,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKK,WAAL,GAAmB,KAAKA,WAAL,CAAiBL,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKM,aAAL,GAAqB,KAAKA,aAAL,CAAmBN,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKO,YAAL,GAAoB,KAAKA,YAAL,CAAkBP,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDQ,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,EAAwC,CAAxC,EAA2CC,WAAvD;AACH;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,QAAIA,MAAM,KAAK,GAAf,EAAoB;AAChB,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KAFD,MAGK,IAAIkB,MAAM,KAAK,IAAf,EAAqB;AACtB,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KAFI,MAGA,IAAIkB,MAAM,KAAK,GAAf,EAAoB;AACrB,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KAFI,MAGA,IAAIkB,MAAM,KAAK,GAAf,EAAoB;AACrB,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH;AACJ;;AAEDU,EAAAA,YAAY,CAACU,CAAD,EAAI;AACZ,UAAMC,QAAQ,GAAG,KAAK3C,KAAL,CAAWC,KAA5B;AAEA,QAAI2C,CAAC,GAAI,KAAK5C,KAAL,CAAWqB,WAAX,GAAyB,KAAKrB,KAAL,CAAWoB,OAArC,GAAgDsB,CAAxD;AAEA,SAAKD,QAAL,CAAc;AACVpC,MAAAA,iBAAiB,EAAE,KAAKL,KAAL,CAAWK,iBAAX,GAA+BsC,QAAQ,CAACC,CAAD,CAAR,CAAY,cAAZ,CADxC;AAEV1C,MAAAA,UAAU,EAAE,KAAKF,KAAL,CAAWE,UAAX,GAAwByC,QAAQ,CAACC,CAAD,CAAR,CAAY,QAAZ,CAF1B;AAGVzC,MAAAA,aAAa,EAAE,KAAKH,KAAL,CAAWG,aAAX,GAA2BwC,QAAQ,CAACC,CAAD,CAAR,CAAY,UAAZ,CAHhC;AAIVxC,MAAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWI,UAAX,GAAwBuC,QAAQ,CAACC,CAAD,CAAR,CAAY,OAAZ;AAJ1B,KAAd;AAOAD,IAAAA,QAAQ,CAACE,MAAT,CAAgBD,CAAhB,EAAmB,CAAnB;AACA,SAAKH,QAAL,CAAc;AAAExC,MAAAA,KAAK,EAAE0C;AAAT,KAAd;AAEA,SAAKG,QAAL,CAAcH,QAAd;AACH;;AAEDG,EAAAA,QAAQ,CAAC7C,KAAD,EAAQ;AACZ,QAAIkB,KAAK,GAAG,EAAZ;AACA,QAAI4B,SAAS,GAAG9C,KAAK,CAAC+C,MAAN,GAAe,KAAKhD,KAAL,CAAWoB,OAA1C;AAEA,QAAIsB,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGK,SAAX,EAAsB;AAClB5B,MAAAA,KAAK,CAAC8B,IAAN,CAAWP,CAAX;AAEAA,MAAAA,CAAC;AACJ;;AAED,SAAKD,QAAL,CAAc;AAAEtB,MAAAA,KAAK,EAAEA;AAAT,KAAd;AACH;;AAEDY,EAAAA,aAAa,GAAG;AACZ,UAAM9B,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AAEA,QAAIiD,WAAW,GAAG,EAAlB;AAEAA,IAAAA,WAAW,CAACD,IAAZ,CAAiB,CAAC,aAAD,EAAgB,eAAhB,EAAiC,QAAjC,EAA2C,aAA3C,EAA0D,YAA1D,EAAwE,cAAxE,EAAwF,gBAAxF,EAA0G,aAA1G,EAAyH,UAAzH,EAAqI,YAArI,CAAjB;;AAEA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzC,KAAK,CAAC+C,MAA1B,EAAkCN,CAAC,EAAnC,EAAuC;AAEnC,UAAIS,UAAU,GAAG,CACblD,KAAK,CAACyC,CAAD,CAAL,CAAS,OAAT,CADa,EAEbzC,KAAK,CAACyC,CAAD,CAAL,CAAS,cAAT,CAFa,EAGbzC,KAAK,CAACyC,CAAD,CAAL,CAAS,QAAT,CAHa,EAIb,MAAMzC,KAAK,CAACyC,CAAD,CAAL,CAAS,cAAT,CAJO,EAKbzC,KAAK,CAACyC,CAAD,CAAL,CAAS,OAAT,CALa,EAMbzC,KAAK,CAACyC,CAAD,CAAL,CAAS,OAAT,CANa,EAObzC,KAAK,CAACyC,CAAD,CAAL,CAAS,OAAT,CAPa,EAQb,MAAMU,UAAU,CAACnD,KAAK,CAACyC,CAAD,CAAL,CAAS,QAAT,CAAD,CAAV,CAA+BW,OAA/B,CAAuC,CAAvC,CARO,EASb,MAAMD,UAAU,CAACnD,KAAK,CAACyC,CAAD,CAAL,CAAS,UAAT,CAAD,CAAV,CAAiCW,OAAjC,CAAyC,CAAzC,CATO,EAUb,MAAMD,UAAU,CAACnD,KAAK,CAACyC,CAAD,CAAL,CAAS,OAAT,CAAD,CAAV,CAA8BW,OAA9B,CAAsC,CAAtC,CAVO,CAAjB;AAaAH,MAAAA,WAAW,CAACD,IAAZ,CAAiBE,UAAjB;AACH;;AAEDD,IAAAA,WAAW,CAACD,IAAZ,CAAiB,CACb,EADa,EAEb,EAFa,EAGb,EAHa,EAIb,MAAM,KAAKjD,KAAL,CAAWK,iBAJJ,EAKb,EALa,EAMb,EANa,EAOb,EAPa,EAQb,MAAM+C,UAAU,CAAC,KAAKpD,KAAL,CAAWE,UAAZ,CAAV,CAAkCmD,OAAlC,CAA0C,CAA1C,CARO,EASb,MAAMD,UAAU,CAAC,KAAKpD,KAAL,CAAWG,aAAZ,CAAV,CAAqCkD,OAArC,CAA6C,CAA7C,CATO,EAUb,MAAMD,UAAU,CAAC,KAAKpD,KAAL,CAAWI,UAAZ,CAAV,CAAkCiD,OAAlC,CAA0C,CAA1C,CAVO,CAAjB;AAaA,SAAKZ,QAAL,CAAc;AAAEvB,MAAAA,aAAa,EAAEgC;AAAjB,KAAd;AACH;;AAEDrB,EAAAA,cAAc,CAACa,CAAD,EAAI;AACd,SAAKD,QAAL,CAAc;AAAEpB,MAAAA,WAAW,EAAEqB;AAAf,KAAd;AACH;;AAEDd,EAAAA,WAAW,GAAG;AACV,QAAI0B,SAAS,GAAG,CAAC,KAAKtD,KAAL,CAAWqB,WAAX,GAAyB,CAA1B,IAA+B,KAAKrB,KAAL,CAAWoB,OAA1D;;AACA,QAAIkC,SAAS,IAAI,CAAjB,EAAoB;AAChB,WAAKb,QAAL,CAAc;AAAEpB,QAAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWqB,WAAX,GAAyB;AAAxC,OAAd;AACH;AACJ;;AAEDS,EAAAA,WAAW,GAAG;AACV,QAAIwB,SAAS,GAAG,CAAC,KAAKtD,KAAL,CAAWqB,WAAX,GAAyB,CAA1B,IAA+B,KAAKrB,KAAL,CAAWoB,OAA1D;;AACA,QAAIkC,SAAS,GAAG,KAAKtD,KAAL,CAAWC,KAAX,CAAiB+C,MAAjC,EAAyC;AACrC,WAAKP,QAAL,CAAc;AAAEpB,QAAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWqB,WAAX,GAAyB;AAAxC,OAAd;AACH;AACJ;;AAEDd,EAAAA,UAAU,CAACgD,UAAD,EAAa;AACnB,UAAMC,MAAM,GAAG;AAAE,WAAK,MAAP;AAAe,WAAK,MAApB;AAA4B,WAAK,OAAjC;AAA0C,WAAK,OAA/C;AAAwD,WAAK,KAA7D;AAAoE,WAAK,MAAzE;AAAiF,WAAK,MAAtF;AAA8F,WAAK,MAAnG;AAA2G,WAAK,MAAhH;AAAwH,YAAM,KAA9H;AAAqI,YAAM,KAA3I;AAAkJ,YAAM;AAAxJ,KAAf;AAEA,QAAI9C,KAAK,GAAG6C,UAAU,CAACE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAZ;AACA,QAAI9C,IAAI,GAAG4C,UAAU,CAACE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAX;AAEA,QAAIC,YAAY,GAAGF,MAAM,CAACG,QAAQ,CAACjD,KAAD,CAAT,CAAN,GAA0B,MAA1B,GAAmCC,IAAtD;AAEA,WAAO+C,YAAP;AACH;;AAEDlD,EAAAA,eAAe,GAAG;AACd,QAAIoD,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,WAAOD,CAAC,CAACE,QAAF,KAAe,CAAtB;AACH;;AAEDrD,EAAAA,cAAc,GAAG;AACb,QAAImD,CAAC,GAAG,IAAIC,IAAJ,EAAR;AAEA,WAAOD,CAAC,CAACG,WAAF,EAAP;AACH;;AAEDvC,EAAAA,aAAa,CAACwC,CAAD,EAAI;AACbA,IAAAA,CAAC,CAACC,cAAF;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACb,WAAKzB,QAAL,CAAc;AAAE5B,QAAAA,WAAW,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd;AAAf,OAAd;AACH,KAFS,EAEP,IAFO,CAAV;AAGH;;AAEDY,EAAAA,aAAa,GAAG;AACZ,UAAMyC,SAAS,GAAG,KAAKnE,KAAL,CAAWC,KAA7B;AAEA,QAAIA,KAAK,GAAG,EAAZ;AAEA,QAAImE,MAAM,GAAGhC,QAAQ,CAACiC,iBAAT,CAA2B,QAA3B,EAAqC,CAArC,EAAwCC,KAArD;AACA,QAAIC,KAAK,GAAGnC,QAAQ,CAACiC,iBAAT,CAA2B,OAA3B,EAAoC,CAApC,EAAuCC,KAAnD;AACA,QAAIE,KAAK,GAAGJ,MAAM,GAAG,GAAT,GAAeG,KAA3B;AAEA,SAAK9B,QAAL,CAAc;AAAE7B,MAAAA,UAAU,EAAE4D;AAAd,KAAd;;AAEA,SAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,SAAS,CAACnB,MAA9B,EAAsCN,CAAC,EAAvC,EAA2C;AACvC,UAAI+B,IAAI,GAAG;AACP,kBAAUL,MADH;AAEP,iBAASG,KAFF;AAGP,kBAAU,KAAKvE,KAAL,CAAWC,KAAX,CAAiByC,CAAjB,EAAoB,QAApB,CAHH;AAIP,wBAAgB,KAAK1C,KAAL,CAAWC,KAAX,CAAiByC,CAAjB,EAAoB,cAApB,CAJT;AAKP,wBAAgB,KAAK1C,KAAL,CAAWC,KAAX,CAAiByC,CAAjB,EAAoB,cAApB,CALT;AAMP,iBAAS,KAAK1C,KAAL,CAAWC,KAAX,CAAiByC,CAAjB,EAAoB,OAApB;AANF,OAAX;AASAzC,MAAAA,KAAK,CAACgD,IAAN,CAAWwB,IAAX;AACH;;AAED,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB,kBAAlB;AAAsC,uCAA+B;AAArE,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE9E,QAAAA;AAAF,OAAf;AAHa,KAAvB;AAMA+E,IAAAA,KAAK,CAAC,8BAAD,EAAiCN,cAAjC,CAAL,CACKO,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgB,OAApB,EAA6B;AACzB,aAAKzC,QAAL,CAAc;AACVnC,UAAAA,SAAS,EAAE,KAAKC,UAAL,CAAgB2E,QAAQ,CAAC,CAAD,CAAR,CAAY,WAAZ,CAAhB,CADD;AAEV7E,UAAAA,iBAAiB,EAAE6E,QAAQ,CAAC,CAAD,CAAR,CAAY,oBAAZ,CAFT;AAGVhF,UAAAA,UAAU,EAAEgF,QAAQ,CAAC,CAAD,CAAR,CAAY,aAAZ,CAHF;AAIV/E,UAAAA,aAAa,EAAE+E,QAAQ,CAAC,CAAD,CAAR,CAAY,gBAAZ,CAJL;AAKV9E,UAAAA,UAAU,EAAE8E,QAAQ,CAAC,CAAD,CAAR,CAAY,aAAZ;AALF,SAAd;AAQA,aAAKzC,QAAL,CAAc;AAAExC,UAAAA,KAAK,EAAEiF,QAAQ,CAAC,CAAD;AAAjB,SAAd;AACH,OAVD,MAWK;AACD,aAAKzC,QAAL,CAAc;AAAEnC,UAAAA,SAAS,EAAE,KAAKC,UAAL,CAAgBiE,KAAhB;AAAb,SAAd;AACH;AACJ,KAjBL;AAkBH;;AAED7C,EAAAA,QAAQ,CAACqC,CAAD,EAAI;AACRA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAME,SAAS,GAAG,KAAKnE,KAAL,CAAWC,KAA7B;AACA,UAAMuC,MAAM,GAAGwB,CAAC,CAACoB,MAAF,CAAS5C,MAAT,CAAgB8B,KAA/B;AAEA,QAAIe,WAAW,GAAGrB,CAAC,CAACoB,MAAF,CAASE,MAAT,CAAgBhB,KAAhB,GAAwB,GAAxB,GAA8BN,CAAC,CAACoB,MAAF,CAASG,KAAT,CAAejB,KAA/D;AAEA,QAAIrE,KAAK,GAAG,EAAZ;AAEA,QAAIwE,IAAI,GAAG;AACP,gBAAUT,CAAC,CAACoB,MAAF,CAASE,MAAT,CAAgBhB,KADnB;AAEP,eAASN,CAAC,CAACoB,MAAF,CAASG,KAAT,CAAejB,KAFjB;AAGP,gBAAUN,CAAC,CAACoB,MAAF,CAAS5C,MAAT,CAAgB8B,KAHnB;AAIP,sBAAgBX,QAAQ,CAACK,CAAC,CAACoB,MAAF,CAASI,YAAT,CAAsBlB,KAAvB,CAJjB;AAKP,sBAAgBN,CAAC,CAACoB,MAAF,CAASK,YAAT,CAAsBnB,KAL/B;AAMP,eAASN,CAAC,CAACoB,MAAF,CAASM,MAAT,CAAgBpB,KAAhB,GAAwB,GAAxB,GAA8BN,CAAC,CAACoB,MAAF,CAASO,KAAT,CAAerB;AAN/C,KAAX;AASArE,IAAAA,KAAK,CAACgD,IAAN,CAAWwB,IAAX;AAEA,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB,kBAAlB;AAAsC,uCAA+B;AAArE,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE9E,QAAAA;AAAF,OAAf;AAHa,KAAvB;AAMA+E,IAAAA,KAAK,CAAC,8BAAD,EAAiCN,cAAjC,CAAL,CACKO,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUC,QAAQ,IAAI;AACd,UAAI;AACA,YAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgB,OAApB,EAA6B;AACzB,gBAAM;AAAEjF,YAAAA,KAAF;AAASI,YAAAA,iBAAT;AAA4BH,YAAAA,UAA5B;AAAwCC,YAAAA,aAAxC;AAAuDC,YAAAA;AAAvD,cAAsE,KAAKJ,KAAjF;AACA,cAAI4F,QAAQ,GAAGV,QAAQ,CAAC,CAAD,CAAvB;;AAEA,cAAIjF,KAAK,CAAC+C,MAAN,GAAe,CAAnB,EAAsB;AAClB,iBAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzC,KAAK,CAAC+C,MAA1B,EAAkCN,CAAC,EAAnC,EAAuC;AACnCkD,cAAAA,QAAQ,CAAC3C,IAAT,CAAchD,KAAK,CAACyC,CAAD,CAAnB;AACH;AACJ;;AAED,eAAKD,QAAL,CAAc;AAAExC,YAAAA,KAAK,EAAE2F,QAAT;AAAmBtE,YAAAA,YAAY,EAAE;AAAjC,WAAd;AAEA,eAAKmB,QAAL,CAAc;AACVnC,YAAAA,SAAS,EAAE,KAAKC,UAAL,CAAgB2E,QAAQ,CAAC,CAAD,CAAR,CAAY,WAAZ,CAAhB,CADD;AAEV7E,YAAAA,iBAAiB,EAAEA,iBAAiB,GAAG6E,QAAQ,CAAC,CAAD,CAAR,CAAY,oBAAZ,CAF7B;AAGVhF,YAAAA,UAAU,EAAEA,UAAU,GAAGgF,QAAQ,CAAC,CAAD,CAAR,CAAY,aAAZ,CAHf;AAIV/E,YAAAA,aAAa,EAAEA,aAAa,GAAG+E,QAAQ,CAAC,CAAD,CAAR,CAAY,gBAAZ,CAJrB;AAKV9E,YAAAA,UAAU,EAAEA,UAAU,GAAG8E,QAAQ,CAAC,CAAD,CAAR,CAAY,aAAZ;AALf,WAAd;AAQA,eAAKzC,QAAL,CAAc;AAAEzB,YAAAA,SAAS,EAAE;AAAb,WAAd;AAEA,eAAK8B,QAAL,CAAc8C,QAAd;;AAEA,cAAIzB,SAAS,CAACnB,MAAV,GAAmB,CAAnB,IAAwB,KAAKhD,KAAL,CAAWY,UAAX,KAA0ByE,WAAtD,EAAmE;AAC/D,iBAAK3D,aAAL;AACH;AACJ,SA3BD,MA4BK;AACD,eAAKa,WAAL,CAAiBC,MAAjB;AACH;AACJ,OAhCD,CAiCA,MAAM;AACF,aAAKD,WAAL,CAAiBC,MAAjB;AACH;AACJ,KAvCL;AAwCH;;AAEDqD,EAAAA,aAAa,CAACvB,KAAD,EAAQ;AACjB,WAAOA,KAAK,CAACwB,QAAN,GAAiBC,OAAjB,CAAyB,uBAAzB,EAAkD,GAAlD,CAAP;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIxD,MAAM,GAAGJ,QAAQ,CAACiC,iBAAT,CAA2B,QAA3B,EAAqC,CAArC,EAAwCC,KAArD;;AACA,QAAI9B,MAAM,KAAK,GAAf,EAAoB;AAChB,WAAKC,QAAL,CAAc;AAAElB,QAAAA,mBAAmB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb;AAAvB,OAAd;AACH,KAFD,MAGK,IAAIiB,MAAM,KAAK,GAAf,EAAoB;AACrB,WAAKC,QAAL,CAAc;AAAElB,QAAAA,mBAAmB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,KAAxC;AAAvB,OAAd;AACH,KAFI,MAGA;AACD,WAAKkB,QAAL,CAAc;AAAElB,QAAAA,mBAAmB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,KAApC;AAAvB,OAAd;AACH;AACJ;;AAED0E,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKjG,KAAL,CAAWsB,YAAX,gBACG,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,KAAKtB,KAAL,CAAWsB,YAAvB;AAAqC,MAAA,OAAO,EAAC,QAA7C;AAAsD,MAAA,KAAK,EAAE;AAAE4E,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,MAAM,EAAE,MAAxB;AAAgCC,QAAAA,QAAQ,EAAE,MAA1C;AAAkDC,QAAAA,SAAS,EAAE,QAA7D;AAAuEC,QAAAA,SAAS,EAAE;AAAlF,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKtG,KAAL,CAAWsB,YADhB,CADH,GAIK,IANV,eAOI;AAAK,MAAA,KAAK,EAAE;AAAE4E,QAAAA,KAAK,EAAE,KAAT;AAAgBK,QAAAA,QAAQ,EAAE,OAA1B;AAAmCJ,QAAAA,MAAM,EAAE,MAA3C;AAAmDG,QAAAA,SAAS,EAAE;AAA9D,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAK3E,QAArB;AAA+B,MAAA,KAAK,EAAE;AAAEuE,QAAAA,KAAK,EAAE,MAAT;AAAiBE,QAAAA,QAAQ,EAAE;AAA3B,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,OAAN;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,WAAW,EAAC,OAJhB;AAKI,MAAA,GAAG,EAAC,GALR;AAMI,MAAA,GAAG,EAAC,IANR;AAOI,MAAA,YAAY,EAAE,KAAKpG,KAAL,CAAWU,KAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAUI,oBAAC,UAAD,CAAY,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,EAAE,EAAC,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAVJ,eAaI,oBAAC,IAAD,CAAM,OAAN;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,WAAW,EAAC,MAJhB;AAKI,MAAA,SAAS,EAAC,GALd;AAMI,MAAA,GAAG,EAAC,MANR;AAOI,MAAA,GAAG,EAAE,KAAKV,KAAL,CAAWW,IAPpB;AAQI,MAAA,KAAK,EAAE;AAAE6F,QAAAA,UAAU,EAAE;AAAd,OARX;AASI,MAAA,YAAY,EAAE,KAAKxG,KAAL,CAAWW,IAT7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CAFJ,eA2BI,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAC,OAA1B;AAAkC,MAAA,OAAO,eACrC,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWa,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,IAAI,EAAC,IAA3B;AAAgC,MAAA,OAAO,EAAC,SAAxC;AAAkD,MAAA,YAAY,EAAE,KAAKW,aAArE;AAAoF,MAAA,OAAO,EAAE,KAAKE,aAAlG;AAAiH,MAAA,KAAK,EAAE;AAAE+E,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,GAAG,EAAE,GAA7B;AAAkCC,QAAAA,KAAK,EAAE,OAAzC;AAAkDP,QAAAA,QAAQ,EAAE,OAA5D;AAAqEQ,QAAAA,UAAU,EAAE;AAAjF,OAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,CA3BJ,eAiCI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEP,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAa,KAAKrG,KAAL,CAAWM,SAAxB,CADJ,CAFJ,CAjCJ,CADJ,eAyCI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,QAAQ,EAAE,MAAM,KAAK0F,cAAL,EAA9B;AAAqD,MAAA,IAAI,EAAC,QAA1D;AAAmE,MAAA,EAAE,EAAC,QAAtE;AAA+E,MAAA,MAAM,MAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,CAFJ,eAQI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEK,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAc,KAAKR,aAAL,CAAmB,KAAK7F,KAAL,CAAWK,iBAA9B,CAAd,CADJ,CAFJ,CARJ,CAzCJ,eAwDI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,IAAI,EAAC,cAAnB;AAAkC,MAAA,EAAE,EAAC,QAArC;AAA8C,MAAA,MAAM,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKL,KAAL,CAAWuB,mBAAX,CAA+BsF,GAA/B,CAAoCC,GAAD,iBAChC;AAAQ,MAAA,GAAG,EAAEA,GAAb;AAAkB,MAAA,KAAK,EAAEA,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAgC,KAAKjB,aAAL,CAAmBiB,GAAnB,CAAhC,CADH,CADL,CAFJ,eAOI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAET,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,EAAE,EAAC,YAAf;AAA4B,MAAA,KAAK,EAAE;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAuD,KAAKlB,aAAL,CAAmBzC,UAAU,CAAC,KAAKpD,KAAL,CAAWE,UAAZ,CAAV,CAAkCmD,OAAlC,CAA0C,CAA1C,CAAnB,CAAvD,CADJ,CAFJ,CAPJ,CAxDJ,eAsEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AACI,MAAA,IAAI,EAAC,cADT;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,WAAW,EAAC,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAOI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEgD,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,EAAE,EAAC,eAAf;AAA+B,MAAA,KAAK,EAAE;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA8D,KAAKlB,aAAL,CAAmBzC,UAAU,CAAC,KAAKpD,KAAL,CAAWG,aAAZ,CAAV,CAAqCkD,OAArC,CAA6C,CAA7C,CAAnB,CAA9D,CADJ,CAFJ,CAPJ,CAtEJ,eAoFI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,OAAN;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,WAAW,EAAC,OAJhB;AAKI,MAAA,SAAS,EAAC,GALd;AAMI,MAAA,GAAG,EAAC,GANR;AAOI,MAAA,GAAG,EAAC,IAPR;AAQI,MAAA,SAAS,EAAE,KAAKrD,KAAL,CAAWsB,YAAX,GAA0B,WAA1B,GAAwC,IARvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAWI,oBAAC,UAAD,CAAY,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,EAAE,EAAC,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAXJ,eAcI,oBAAC,IAAD,CAAM,OAAN;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,WAAW,EAAC,MAJhB;AAKI,MAAA,SAAS,EAAC,GALd;AAMI,MAAA,GAAG,EAAE,KAAKtB,KAAL,CAAWW,IANpB;AAOI,MAAA,KAAK,EAAE;AAAE6F,QAAAA,UAAU,EAAE;AAAd,OAPX;AAQI,MAAA,SAAS,EAAE,KAAKxG,KAAL,CAAWsB,YAAX,GAA0B,WAA1B,GAAwC,IARvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CAFJ,eA2BI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,IAAI,EAAC,IAA3B;AAAgC,MAAA,KAAK,EAAE;AAAEmF,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,GAAG,EAAE,GAA7B;AAAkCC,QAAAA,KAAK,EAAE,MAAzC;AAAiDP,QAAAA,QAAQ,EAAE,OAA3D;AAAoEQ,QAAAA,UAAU,EAAE;AAAhF,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BJ,eA4BI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEP,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,EAAE,EAAC,YAAf;AAA4B,MAAA,KAAK,EAAE;AAAEU,QAAAA,KAAK,EAAE;AAAT,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAyD,KAAKlB,aAAL,CAAmBzC,UAAU,CAAC,KAAKpD,KAAL,CAAWI,UAAZ,CAAV,CAAkCiD,OAAlC,CAA0C,CAA1C,CAAnB,CAAzD,CADJ,CAFJ,CA5BJ,CApFJ,CADJ,CADJ,eA2HI;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAyB,MAAA,KAAK,EAAE;AAAE6C,QAAAA,KAAK,EAAE,MAAT;AAAiBc,QAAAA,KAAK,EAAE,MAAxB;AAAgCC,QAAAA,UAAU,EAAE;AAA5C,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKjH,KAAL,CAAWC,KAAX,CAAiB+C,MAAjB,GAA0B,CAA1B,gBAA8B;AAAK,MAAA,OAAO,EAAE,KAAKjB,aAAnB;AAAkC,MAAA,KAAK,EAAE;AAAEmE,QAAAA,KAAK,EAAE,MAAT;AAAiBG,QAAAA,SAAS,EAAE,OAA5B;AAAqCa,QAAAA,YAAY,EAAE;AAAnD,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC3B,oBAAC,OAAD;AAAS,MAAA,QAAQ,EAAE,uBAAuB,KAAKlH,KAAL,CAAWU,KAAlC,GAA0C,GAA1C,GAAgD,KAAKV,KAAL,CAAWW,IAA9E;AAAoF,MAAA,IAAI,EAAE,KAAKX,KAAL,CAAWkB,aAAX,CAAyB8B,MAAzB,GAAkC,CAAlC,GAAsC,KAAKhD,KAAL,CAAWkB,aAAjD,GAAiE,EAA3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD2B,CAA9B,GAEQ,IAHb,CA3HJ,eAgII;AAAK,MAAA,KAAK,EAAE;AAAEgF,QAAAA,KAAK,EAAE,MAAT;AAAiBc,QAAAA,KAAK,EAAE,MAAxB;AAAgCb,QAAAA,MAAM,EAAE;AAAxC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKnG,KAAL,CAAWC,KAAX,CAAiB+C,MAAjB,GAA0B,CAA1B,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,EAAE,EAAC,YAAjC;AAA8C,MAAA,MAAM,EAAE,KAAKhD,KAAL,CAAWgB,SAAjE;AAA4E,MAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWmH,WAAjG;AAA8G,MAAA,KAAK,EAAE;AAAEjB,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,KAAK,EAAE;AAAEE,QAAAA,SAAS,EAAE,QAAb;AAAuBD,QAAAA,QAAQ,EAAE,OAAjC;AAA0CgB,QAAAA,aAAa,EAAE;AAAzD,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATJ,CADJ,CADJ,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKpH,KAAL,CAAWC,KAAX,CACIoH,KADJ,CACU,KAAKrH,KAAL,CAAWqB,WAAX,GAAyB,KAAKrB,KAAL,CAAWoB,OAD9C,EACuD,CAAC,KAAKpB,KAAL,CAAWqB,WAAX,GAAyB,CAA1B,IAA+B,KAAKrB,KAAL,CAAWoB,OADjG,EAEIyF,GAFJ,CAEQ,CAACpC,IAAD,EAAO/B,CAAP,kBACD;AAAI,MAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK+B,IAAI,CAAC,cAAD,CAAT,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAAC,QAAD,CAAT,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKoB,aAAL,CAAmBpB,IAAI,CAAC,cAAD,CAAvB,CAAN,CAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAAC,OAAD,CAAT,CAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAAC,OAAD,CAAT,CALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAAC,OAAD,CAAT,CANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKoB,aAAL,CAAmBzC,UAAU,CAACqB,IAAI,CAAC,QAAD,CAAL,CAAV,CAA2BpB,OAA3B,CAAmC,CAAnC,CAAnB,CAAN,CAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKwC,aAAL,CAAmBzC,UAAU,CAACqB,IAAI,CAAC,UAAD,CAAL,CAAV,CAA6BpB,OAA7B,CAAqC,CAArC,CAAnB,CAAN,CARJ,eASI;AAAI,MAAA,KAAK,EAAE;AAAEoD,QAAAA,QAAQ,EAAE;AAAZ,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACM,KAAKZ,aAAL,CAAmBzC,UAAU,CAACqB,IAAI,CAAC,OAAD,CAAL,CAAV,CAA0BpB,OAA1B,CAAkC,CAAlC,CAAnB,CADN,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKrB,YAAL,CAAkBU,CAAlB,CAAvB;AAA6C,MAAA,SAAS,EAAC,OAAvD;AAA+D,MAAA,KAAK,EAAE;AAAE+D,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,GAAG,EAAE,MAA7B;AAAqCC,QAAAA,KAAK,EAAE;AAA5C,OAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,qBAAY,MAAlB;AAAyB,MAAA,KAAK,EAAE;AAAEW,QAAAA,MAAM,EAAE;AAAV,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAFJ,CATJ,CAHP,CADL,CAdJ,CADJ,EAsCK,KAAKtH,KAAL,CAAWC,KAAX,CAAiB+C,MAAjB,GAA0B,KAAKhD,KAAL,CAAWoB,OAArC,gBACG,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,OAAO,EAAE,KAAKQ,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAK5B,KAAL,CAAWmB,KAAX,CAAiB0F,GAAjB,CAAsBnE,CAAD,iBAClB,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,MAAM,EAAEA,CAAC,KAAK,KAAK1C,KAAL,CAAWqB,WAA1C;AAAuD,MAAA,GAAG,EAAEqB,CAA5D;AAA+D,MAAA,OAAO,EAAE,MAAM,KAAKb,cAAL,CAAoBa,CAApB,CAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuGA,CAAC,GAAG,CAA3G,CADH,CAFL,eAKI,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,OAAO,EAAE,KAAKZ,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADH,GAQK,IA9CV,CADJ,GAiDM,IAnDd,CAhIJ,CAPJ,CADJ;AAgMH;;AAxfkC;;AA2fvC,eAAejC,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Col, InputGroup, Button, OverlayTrigger, Tooltip, Table, Card, Pagination, Alert } from 'react-bootstrap';\nimport { CSVLink } from \"react-csv\";\nimport '../index.css'\n\nclass BondPricingOne extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bonds: [],\n            totalPrice: 0,\n            totalInterest: 0,\n            totalValue: 0,\n            totalDenomination: 0,\n            totalDate: this.formatDate(this.getCurrentMonth() + '/' + this.getCurrentYear()),\n            month: this.getCurrentMonth(),\n            year: this.getCurrentYear(),\n            updateDate: this.getCurrentMonth() + '/' + this.getCurrentYear(),\n            showTooltip: { visibility: 'visible' },\n            showCards: { visibility: 'hidden' },\n            hideTable: true,\n            export: \"Value as of, Serial #, Series, Denomination, Issue Date, Next Accrual, Final Maturity, Issue Price, Interest, Value\",\n            exportResults: [],\n            pages: [],\n            perPage: 5,\n            currentPage: 0,\n            errorMessage: null,\n            denominationOptions: [50, 75, 100, 200, 500, 1000, 5000, 10000]\n        }\n\n        this.onUpdateEnter = this.onUpdateEnter.bind(this)\n        this.onUpdateClick = this.onUpdateClick.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.formatDate = this.formatDate.bind(this)\n        this.setPrevPage = this.setPrevPage.bind(this)\n        this.setCurrentPage = this.setCurrentPage.bind(this)\n        this.setNextPage = this.setNextPage.bind(this)\n        this.exportOnClick = this.exportOnClick.bind(this)\n        this.handleClickX = this.handleClickX.bind(this)\n    }\n\n    componentDidMount() {\n        console.log(document.getElementsByClassName('card')[0].offsetWidth)\n    }\n\n    handleError(series) {\n        if (series === 'I') {\n            this.setState({ errorMessage: \"Series I Bonds have been issued from September, 1998 to the present.\" })\n        }\n        else if (series === 'EE') {\n            this.setState({ errorMessage: \"Series EE Bonds have been issued from January, 1980 to the present.\" })\n        }\n        else if (series === 'E') {\n            this.setState({ errorMessage: \"Series E Bonds were issued between May, 1941 and June, 1980.\" })\n        }\n        else if (series === 'S') {\n            this.setState({ errorMessage: \"Savings Notes were issued between May, 1967 and October, 1970.\" })\n        }\n    }\n\n    handleClickX(i) {\n        const newBonds = this.state.bonds\n\n        let x = (this.state.currentPage * this.state.perPage) + i\n\n        this.setState({\n            totalDenomination: this.state.totalDenomination - newBonds[x]['denomination'],\n            totalPrice: this.state.totalPrice - newBonds[x]['iPrice'],\n            totalInterest: this.state.totalInterest - newBonds[x]['interest'],\n            totalValue: this.state.totalValue - newBonds[x]['value']\n        })\n\n        newBonds.splice(x, 1)\n        this.setState({ bonds: newBonds })\n\n        this.setPages(newBonds)\n    }\n\n    setPages(bonds) {\n        let pages = []\n        let pageCount = bonds.length / this.state.perPage\n\n        let i = 0\n        while (i < pageCount) {\n            pages.push(i)\n\n            i++\n        }\n\n        this.setState({ pages: pages })\n    }\n\n    exportOnClick() {\n        const bonds = this.state.bonds\n\n        let bondExports = []\n\n        bondExports.push(['Lookup Date', 'Serial Number', 'Series', 'Bond Amount', 'Issue Date', 'Next Accrual', 'Final Maturity', 'Issue Price', 'Interest', 'Bond Value'])\n\n        for (let i = 0; i < bonds.length; i++) {\n\n            let bondExport = [\n                bonds[i]['vDate'],\n                bonds[i]['serialNumber'],\n                bonds[i]['series'],\n                '$' + bonds[i]['denomination'],\n                bonds[i]['iDate'],\n                bonds[i]['aDate'],\n                bonds[i]['mDate'],\n                '$' + parseFloat(bonds[i]['iPrice']).toFixed(2),\n                '$' + parseFloat(bonds[i]['interest']).toFixed(2),\n                '$' + parseFloat(bonds[i]['value']).toFixed(2)\n            ]\n\n            bondExports.push(bondExport);\n        }\n\n        bondExports.push([\n            \"\",\n            \"\",\n            \"\",\n            '$' + this.state.totalDenomination,\n            \"\",\n            \"\",\n            \"\",\n            '$' + parseFloat(this.state.totalPrice).toFixed(2),\n            '$' + parseFloat(this.state.totalInterest).toFixed(2),\n            '$' + parseFloat(this.state.totalValue).toFixed(2)\n        ])\n\n        this.setState({ exportResults: bondExports })\n    }\n\n    setCurrentPage(i) {\n        this.setState({ currentPage: i })\n    }\n\n    setPrevPage() {\n        let showCount = (this.state.currentPage - 1) * this.state.perPage\n        if (showCount >= 0) {\n            this.setState({ currentPage: this.state.currentPage - 1 })\n        }\n    }\n\n    setNextPage() {\n        let showCount = (this.state.currentPage + 1) * this.state.perPage\n        if (showCount < this.state.bonds.length) {\n            this.setState({ currentPage: this.state.currentPage + 1 })\n        }\n    }\n\n    formatDate(value_date) {\n        const months = { \"1\": \"Jan.\", \"2\": \"Feb.\", \"3\": \"March\", \"4\": \"April\", \"5\": \"May\", \"6\": \"June\", \"7\": \"July\", \"8\": \"Aug.\", \"9\": \"Sept\", \"10\": \"Oct\", \"11\": \"Nov\", \"12\": \"Dec\" }\n\n        let month = value_date.split('/')[0]\n        let year = value_date.split('/')[1]\n\n        let month_string = months[parseInt(month)] + ' 1, ' + year\n\n        return month_string\n    }\n\n    getCurrentMonth() {\n        let d = new Date();\n        return d.getMonth() + 1\n    }\n\n    getCurrentYear() {\n        let d = new Date();\n\n        return d.getFullYear()\n    }\n\n    onUpdateEnter(e) {\n        e.preventDefault();\n\n        setTimeout(() => {\n            this.setState({ showTooltip: { visibility: 'hidden' } })\n        }, 3500)\n    }\n\n    onUpdateClick() {\n        const bondState = this.state.bonds\n\n        let bonds = []\n\n        let vMonth = document.getElementsByName('aMonth')[0].value\n        let vYear = document.getElementsByName('aYear')[0].value\n        let vDate = vMonth + '/' + vYear\n\n        this.setState({ updateDate: vDate })\n\n        for (let i = 0; i < bondState.length; i++) {\n            let bond = {\n                'vMonth': vMonth,\n                'vYear': vYear,\n                'series': this.state.bonds[i]['series'],\n                'denomination': this.state.bonds[i]['denomination'],\n                'serialNumber': this.state.bonds[i]['serialNumber'],\n                'iDate': this.state.bonds[i]['iDate']\n            }\n\n            bonds.push(bond)\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                if (response[0] !== 'error') {\n                    this.setState({\n                        totalDate: this.formatDate(response[1]['totalDate']),\n                        totalDenomination: response[1]['totalDenominations'],\n                        totalPrice: response[1]['totalPrices'],\n                        totalInterest: response[1]['totalInterests'],\n                        totalValue: response[1]['totalValues']\n                    })\n\n                    this.setState({ bonds: response[0] })\n                }\n                else {\n                    this.setState({ totalDate: this.formatDate(vDate) })\n                }\n            })\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const bondState = this.state.bonds\n        const series = e.target.series.value\n\n        let currentDate = e.target.aMonth.value + '/' + e.target.aYear.value\n\n        let bonds = []\n\n        let bond = {\n            'vMonth': e.target.aMonth.value,\n            'vYear': e.target.aYear.value,\n            'series': e.target.series.value,\n            'denomination': parseInt(e.target.denomination.value),\n            'serialNumber': e.target.serialnumber.value,\n            'iDate': e.target.iMonth.value + '/' + e.target.iYear.value\n        }\n\n        bonds.push(bond)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            body: JSON.stringify({ bonds })\n        };\n\n        fetch('http://localhost:5000/update', requestOptions)\n            .then(response => response.json())\n            .then(response => {\n                try {\n                    if (response[0] !== 'error') {\n                        const { bonds, totalDenomination, totalPrice, totalInterest, totalValue } = this.state\n                        let nextBond = response[0]\n\n                        if (bonds.length > 0) {\n                            for (let i = 0; i < bonds.length; i++) {\n                                nextBond.push(bonds[i])\n                            }\n                        }\n\n                        this.setState({ bonds: nextBond, errorMessage: null })\n\n                        this.setState({\n                            totalDate: this.formatDate(response[1]['totalDate']),\n                            totalDenomination: totalDenomination + response[1]['totalDenominations'],\n                            totalPrice: totalPrice + response[1]['totalPrices'],\n                            totalInterest: totalInterest + response[1]['totalInterests'],\n                            totalValue: totalValue + response[1]['totalValues']\n                        })\n\n                        this.setState({ hideTable: false })\n\n                        this.setPages(nextBond)\n\n                        if (bondState.length > 0 && this.state.updateDate !== currentDate) {\n                            this.onUpdateClick()\n                        }\n                    }\n                    else {\n                        this.handleError(series)\n                    }\n                }\n                catch {\n                    this.handleError(series)\n                }\n            })\n    }\n\n    convertValues(value) {\n        return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    }\n\n    onSeriesChange() {\n        let series = document.getElementsByName('series')[0].value\n        if (series === 'S') {\n            this.setState({ denominationOptions: [25, 50, 75, 100] })\n        }\n        else if (series === 'E') {\n            this.setState({ denominationOptions: [25, 50, 75, 100, 200, 500, 1000, 5000, 10000] })\n        }\n        else {\n            this.setState({ denominationOptions: [50, 75, 100, 200, 500, 1000, 5000, 10000] })\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"jumbotron-pages\"></div>\n                {this.state.errorMessage ?\n                    <Alert key={this.state.errorMessage} variant='danger' style={{ width: '70%', margin: 'auto', fontSize: '.9em', textAlign: 'center', marginTop: '.5em' }}>\n                        {this.state.errorMessage}\n                    </Alert>\n                    : null}\n                <div style={{ width: '70%', minWidth: '850px', margin: 'auto', marginTop: '2rem' }}>\n                    <Form onSubmit={this.onSubmit} style={{ width: '100%', fontSize: '14px' }}>\n                        <Form.Row>\n                            <Col className=\"col-padding\">\n                                <Form.Label>VALUE AS OF</Form.Label>\n                                <InputGroup>\n                                    <Form.Control\n                                        required\n                                        name=\"aMonth\"\n                                        type=\"number\"\n                                        placeholder=\"Month\"\n                                        min=\"1\"\n                                        max=\"12\"\n                                        defaultValue={this.state.month}\n                                    />\n                                    <InputGroup.Append>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                    </InputGroup.Append>\n                                    <Form.Control\n                                        required\n                                        name=\"aYear\"\n                                        type=\"number\"\n                                        placeholder=\"Year\"\n                                        maxLength=\"4\"\n                                        min=\"1992\"\n                                        max={this.state.year}\n                                        style={{ marginLeft: '-1px' }}\n                                        defaultValue={this.state.year}\n                                    />\n                                </InputGroup>\n                                <OverlayTrigger placement='right' overlay={\n                                    <Tooltip style={this.state.showTooltip} >\n                                        Revalue all bonds by this date.\n                                    </Tooltip>}>\n                                    <Button type=\"button\" size='sm' variant='success' onMouseEnter={this.onUpdateEnter} onClick={this.onUpdateClick} style={{ position: 'absolute', top: '0', right: '.75em', fontSize: '.65em', fontWeight: 'bold' }}>UPDATE</Button>\n                                </OverlayTrigger>\n                                <Card className=\"card-margin-top\">\n                                    <Card.Header className='card-header'>VALUED FROM</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title>{this.state.totalDate}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col className=\"col-padding\">\n                                <Form.Label>SERIES</Form.Label>\n                                <Form.Control onChange={() => this.onSeriesChange()} name=\"series\" as=\"select\" custom>\n                                    <option value=\"EE\">EE Bond</option>\n                                    <option value=\"I\">I Bond</option>\n                                    <option value=\"E\">E Bond</option>\n                                    <option value=\"S\">Savings Note</option>\n                                </Form.Control>\n                                <Card className=\"card-margin-top\">\n                                    <Card.Header className='card-header'>TOTAL FACE VALUE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title>${this.convertValues(this.state.totalDenomination)}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col className=\"col-padding\">\n                                <Form.Label>DENOMINATION</Form.Label>\n                                <Form.Control name=\"denomination\" as=\"select\" custom>\n                                    {this.state.denominationOptions.map((opt) => (\n                                        <option key={opt} value={opt}>${this.convertValues(opt)}</option>\n                                    ))}\n                                </Form.Control>\n                                <Card className=\"card-margin-top\">\n                                    <Card.Header className='card-header'>TOTAL PRICE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-price\" style={{ color: 'red' }}>${this.convertValues(parseFloat(this.state.totalPrice).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col className=\"col-padding\">\n                                <Form.Label size='sm'>SERIAL NUMBER</Form.Label>\n                                <Form.Control\n                                    name=\"serialnumber\"\n                                    type=\"text\"\n                                    placeholder=\"Optional\"\n                                />\n                                <Card className=\"card-margin-top\">\n                                    <Card.Header className='card-header'>TOTAL INTEREST</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-interest\" style={{ color: '#ff8c00' }}>${this.convertValues(parseFloat(this.state.totalInterest).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                            <Col className=\"col-padding\">\n                                <Form.Label>ISSUE DATE</Form.Label>\n                                <InputGroup>\n                                    <Form.Control\n                                        required\n                                        name=\"iMonth\"\n                                        type=\"number\"\n                                        placeholder=\"Month\"\n                                        maxLength=\"2\"\n                                        min=\"1\"\n                                        max=\"12\"\n                                        className={this.state.errorMessage ? 'highlight' : null}\n                                    />\n                                    <InputGroup.Append>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">/</InputGroup.Text>\n                                    </InputGroup.Append>\n                                    <Form.Control\n                                        required\n                                        name=\"iYear\"\n                                        type=\"number\"\n                                        placeholder=\"Year\"\n                                        maxLength=\"4\"\n                                        max={this.state.year}\n                                        style={{ marginLeft: '-1px' }}\n                                        className={this.state.errorMessage ? 'highlight' : null}\n                                    />\n                                </InputGroup>\n                                <Button type=\"submit\" size='sm' style={{ position: 'absolute', top: '0', right: '.5em', fontSize: '.65em', fontWeight: 'bold' }}>SUBMIT</Button>\n                                <Card className=\"card-margin-top\">\n                                    <Card.Header className='card-header'>TOTAL VALUE</Card.Header>\n                                    <Card.Body style={{ textAlign: 'center' }}>\n                                        <Card.Title id=\"card-value\" style={{ color: 'green' }}>${this.convertValues(parseFloat(this.state.totalValue).toFixed(2))}</Card.Title>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Form.Row>\n                    </Form >\n                    <div id=\"card-container\" style={{ width: '100%', float: 'left', paddingTop: '1em' }}>\n                        {this.state.bonds.length > 0 ? <div onClick={this.exportOnClick} style={{ width: '100%', textAlign: 'right', marginBottom: '.25em' }}>\n                            <CSVLink filename={'bonds_valued_from_' + this.state.month + '_' + this.state.year} data={this.state.exportResults.length > 0 ? this.state.exportResults : ''}>Export</CSVLink>\n                        </div> : null}\n                    </div >\n                    <div style={{ width: '100%', float: 'left', margin: '0 0 1em 0' }}>\n                        {\n                            this.state.bonds.length > 0 ?\n                                <div>\n                                    <Table striped bordered hover id=\"bond-table\" hidden={this.state.hideTable} onChange={this.state.changeTable} style={{ width: '100%', margin: 'auto' }}>\n                                        <thead style={{ textAlign: \"center\", fontSize: \".75em\", textTransform: \"uppercase\" }}>\n                                            <tr>\n                                                <th>Serial #</th>\n                                                <th>Series</th>\n                                                <th>Face Value</th>\n                                                <th>Issue Date</th>\n                                                <th>Next Accrual</th>\n                                                <th>Final Maturity</th>\n                                                <th>Issue Price</th>\n                                                <th>Interest</th>\n                                                <th>Value</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {this.state.bonds\n                                                .slice(this.state.currentPage * this.state.perPage, (this.state.currentPage + 1) * this.state.perPage)\n                                                .map((bond, i) => (\n                                                    <tr key={i}>\n                                                        <td>{bond['serialNumber']}</td>\n                                                        <td>{bond['series']}</td>\n                                                        <td>${this.convertValues(bond['denomination'])}</td>\n                                                        <td>{bond['iDate']}</td>\n                                                        <td>{bond['aDate']}</td>\n                                                        <td>{bond['mDate']}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['iPrice']).toFixed(2))}</td>\n                                                        <td>${this.convertValues(parseFloat(bond['interest']).toFixed(2))}</td>\n                                                        <td style={{ position: 'relative' }}>\n                                                            ${this.convertValues(parseFloat(bond['value']).toFixed(2))}\n                                                            <button onClick={() => this.handleClickX(i)} className='close' style={{ position: 'absolute', top: '.5em', right: '-1em' }}>\n                                                                <span aria-hidden='true' style={{ border: 'none' }}>&times;</span>\n                                                            </button>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </Table>\n                                    {this.state.bonds.length > this.state.perPage ?\n                                        <Pagination size='sm'>\n                                            <Pagination.Prev onClick={this.setPrevPage} />\n                                            {this.state.pages.map((i) => (\n                                                <Pagination.Item active={i === this.state.currentPage} key={i} onClick={() => this.setCurrentPage(i)}>{i + 1}</Pagination.Item>\n                                            ))}\n                                            <Pagination.Next onClick={this.setNextPage} />\n                                        </Pagination>\n                                        : null}\n                                </div>\n                                : null}\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default BondPricingOne;\n\n"]},"metadata":{},"sourceType":"module"}